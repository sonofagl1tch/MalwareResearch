using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using System.Xml;
using Microsoft.Win32;

namespace enumerationStation
{
    public partial class EnumerationNation : Form
    {
        //gloabl variables
        private String hosts = "";
        private String target = "";
        private String applicationData = "";
        private String rootDir = "";
        private String userTemp = "";
        private String userSpec = "";
        private List<String> ApplicationDataFolders = new List<String>();
        private List<String> RootDirFolders = new List<String>();
        private List<String> UserTempFolders = new List<String>();
        private List<String> ApplicationDataFiles = new List<String>();
        private List<String> RootDirFiles = new List<String>();
        private List<String> UserTempFiles = new List<String>(); 
        private List<string> users = new List<string>();

        public EnumerationNation()
        {
            InitializeComponent();
        }
        //run application
        private void Run_Click(object sender, EventArgs e)
        {
            //update progess bar
            status.Text = null;
            status.Text = "Running";
            progressBar1.Value = 0;
            progressBar1.PerformStep();
            progresbarupdate();
            //get host
            String getHost = machines.Text.ToString();
            String trim = getHost.Replace(" ", "");
            hosts = trim;
            if (hosts.Contains(","))
            {
                string[] MultiHosts = hosts.Split(',');
                foreach (string client in MultiHosts)
                {
                    target = client.Trim();
                    //send host to get checked
                    pingHost();
                    output.AppendText("\n====================================================================\n\n");
                }
            }
            else
            {
                target = machines.Text.ToString();
                //send host to get checked
                pingHost();
            }
            //finish progress bar
            status.Text = "Finished";
            progressBar1.Value = 100;
            progressBar1.PerformStep();
            output.AppendText("\n\nFinished searching " + machines.Text + ".\n");
            hosts = null;

        }
        //update progress bar
        private void progresbarupdate()
        {
            if (progressBar1.Value == progressBar1.Maximum)
            {
                //button1.Enabled = true;
                status.Text = "100%";
                return;
            }
            progressBar1.PerformStep();
            double x = (progressBar1.Value / progressBar1.Maximum) * 100.0;
            status.Text = String.Format("{0}%", x);
        }
        //ping each host 
        private void pingHost()
        {
            //update progess bar
            progresbarupdate();
            //try
            try
            {
                //if host string exists
                if (target.Length > 0)
                {
                    //ping host
                    Ping objping = new Ping();
                    PingReply objpingreply = objping.Send(target, 1000);
                    //if ping was successfull
                    if (objpingreply.Status == IPStatus.Success)
                    {
                        //print out that ping succeeded
                        //string pingable = System.String.Concat("\n" + host + " ,is alive\n");
                        string pingable = "\nPing " + objpingreply.Status.ToString() + " to " + target + "\n";
                        output.AppendText(pingable);

                        //go to OS check
                        //if os is win7
                        #region win7
                        if (GETOSMethod().Contains("Windows 7"))
                        {
                            //update progess bar
                            progresbarupdate();
                            #region specified user
                            if (specifyUser.Checked)
                            {
                                //use these strings
                                applicationData = "\\\\" + target + "\\c$\\Users\\" + Specifycorpid.Text + "\\AppData\\Roaming\\";
                                rootDir = "\\\\" + target + "\\c$\\";
                                userTemp = "\\\\" + target + "\\c$\\Users\\" + Specifycorpid.Text + "\\AppData\\Local\\Temp\\";
                                userSpec = specifiedPath.Text;
                                //send path to enumerating subroutine
                                if (AppicationData.Checked)
                                {
                                    //update progess bar
                                    progresbarupdate();
                                    enumerateDir(applicationData);
                                    enumerateFiles(applicationData);
                                }
                                //send path to enumerating subroutine
                                if (RootDir.Checked)
                                {
                                    //update progess bar
                                    progresbarupdate();
                                    enumerateDir(rootDir);
                                    enumerateFiles(applicationData);
                                }
                                //send path to enumerating subroutine
                                if (UserTemp.Checked)
                                {
                                    //update progess bar
                                    progresbarupdate();
                                    enumerateDir(userTemp);
                                    enumerateFiles(userTemp);
                                }
                                //send path to enumerating subroutine
                                if (userPath.Checked)
                                {
                                    //update progess bar
                                    progresbarupdate();
                                    customPath(userSpec);
                                }
                                //update progess bar
                                progresbarupdate();
                            }
                            #endregion specified user
                            #region did not specify user
                            else
                            {
                                //update progess bar
                                progresbarupdate();
                                getUsers("win7");
                                foreach (string CID in users)
                                {
                                    //use these strings
                                    applicationData = "\\\\" + target + "\\c$\\Users\\" + CID + "\\AppData\\Roaming\\";
                                    rootDir = "\\\\" + target + "\\c$\\";
                                    userTemp = "\\\\" + target + "\\c$\\Users\\" + CID + "\\AppData\\Local\\Temp\\";
                                    userSpec = specifiedPath.Text;
                                    //send path to enumerating subroutine
                                    if (AppicationData.Checked)
                                    {
                                        //update progess bar
                                        progresbarupdate();
                                        enumerateDir(applicationData);
                                        enumerateFiles(applicationData);
                                        output.AppendText("\n====================================================================\n\n");
                                    }
                                   
                                    //send path to enumerating subroutine
                                    if (UserTemp.Checked)
                                    {
                                        //update progess bar
                                        progresbarupdate();
                                        enumerateDir(userTemp);
                                        enumerateFiles(userTemp);
                                        output.AppendText("\n====================================================================\n\n");
                                    }

                                }
                                //send path to enumerating subroutine
                                if (userPath.Checked)
                                {
                                    //update progess bar
                                    progresbarupdate();
                                    customPath(userSpec);
                                }
                                //send path to enumerating subroutine
                                if (RootDir.Checked)
                                {
                                    //update progess bar
                                    progresbarupdate();
                                    enumerateDir(rootDir);
                                    enumerateFiles(applicationData);
                                    output.AppendText("\n====================================================================\n\n");
                                }
                            }
                            #endregion did not specify user


                        }
                        #endregion win7
                        //if os is winxp
                        #region winXP
                        else if (GETOSMethod().Contains("XP"))
                        {
                            //update progess bar
                            progresbarupdate();
                            #region specified user
                            if (specifyUser.Checked)
                            {
                                //use these strings
                                applicationData = "\\\\" + target + "\\c$\\Documents and Settings\\" + Specifycorpid.Text + "\\Application Data\\";
                                rootDir = "\\\\" + target + "\\c$\\";
                                userTemp = "\\\\" + target + "\\c$\\Documents and Settings\\" + Specifycorpid.Text + "\\Local Settings\\Temp\\";
                                userSpec = specifiedPath.Text;
                                //send path to enumerating subroutine
                                if (AppicationData.Checked)
                                {
                                    //update progess bar
                                    progresbarupdate();
                                    enumerateDir(applicationData);
                                    enumerateFiles(applicationData);
                                }
                                //send path to enumerating subroutine
                                if (RootDir.Checked)
                                {
                                    //update progess bar
                                    progresbarupdate();
                                    enumerateDir(rootDir);
                                    enumerateFiles(applicationData);
                                }
                                //send path to enumerating subroutine
                                if (UserTemp.Checked)
                                {
                                    //update progess bar
                                    progresbarupdate();
                                    enumerateDir(userTemp);
                                    enumerateFiles(userTemp);
                                }
                                //send path to enumerating subroutine
                                if (userPath.Checked)
                                {
                                    //update progess bar
                                    progresbarupdate();
                                    customPath(userSpec);
                                }
                            }
                            #endregion specified user
                            #region did not specify user
                            else
                            {
                                //update progess bar
                                progresbarupdate();
                                getUsers("winXP");
                                foreach (string CID in users)
                                {
                                    //use these strings
                                    applicationData = "\\\\" + target + "\\c$\\Documents and Settings\\" + CID + "\\Application Data\\";
                                    rootDir = "\\\\" + target + "\\c$\\";
                                    userTemp = "\\\\" + target + "\\c$\\Documents and Settings\\" + CID + "\\Local Settings\\Temp\\";
                                    userSpec = specifiedPath.Text;
                                    //send path to enumerating subroutine
                                    if (AppicationData.Checked)
                                    {
                                        //update progess bar
                                        progresbarupdate();
                                        enumerateDir(applicationData);
                                        enumerateFiles(applicationData);
                                        output.AppendText("\n====================================================================\n\n");
                                    }
                                    
                                    //send path to enumerating subroutine
                                    if (UserTemp.Checked)
                                    {
                                        //update progess bar
                                        progresbarupdate();
                                        enumerateDir(userTemp);
                                        enumerateFiles(userTemp);
                                        output.AppendText("\n====================================================================\n\n");
                                    }
                                   
                                    
                                }
                                //send path to enumerating subroutine
                                if (userPath.Checked)
                                {
                                    //update progess bar
                                    progresbarupdate();
                                    customPath(userSpec);
                                }
                                //send path to enumerating subroutine
                                if (RootDir.Checked)
                                {
                                    //update progess bar
                                    progresbarupdate();
                                    enumerateDir(rootDir);
                                    enumerateFiles(applicationData);
                                    output.AppendText("\n====================================================================\n\n");
                                }
                            }
                            #endregion did not specify user
                        }
                        #endregion winXP
                        //if os is not XP or 7
                        else
                        {
                            //break and show user error
                            Close();
                        }

                    }
                    //if ping failed
                    else
                    {
                        //update progess bar
                        progresbarupdate();
                        //print out that ping has failed
                        //string notpingable = System.String.Concat("\n" + host + " ,is dead\n");
                        String notpingable = "\nPing " + objpingreply.Status.ToString() + " to " + target + " \nAll operations aborted for " + target;
                        output.AppendText(notpingable);
                    }
                }
                //update progess bar
                progresbarupdate();
            }
            //catch all exceptions
            catch (Exception ex)
            {
                output.AppendText(ex.Message + "\n");
                MessageBox.Show("ERROR: Host " + target + " does not exist.\n" + ex.Message + "\n\nUse Ctrl+C to copy to clipboard");
                //throw;
            }

        }
        //this will obtain the os version from host
        private String GETOSMethod()
        {
            //update progess bar
            progresbarupdate();
            String prodName = null;
            if (target.Length >= 1)
            {
                //using the registry get the name and version of the OS
                using (var reg = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, target))
                using (var key = reg.OpenSubKey(@"Software\Microsoft\Windows NT\CurrentVersion\"))
                {
                    //MessageBox.Show(string.Format("Host:\n{0}\n\nName:\n{1}\n\nVersion:\n{2}", host, key.GetValue("ProductName"), key.GetValue("CurrentVersion")));
                    prodName = key.GetValue("ProductName").ToString();
                }
            }
            else
            {
                MessageBox.Show("Error: Hostname is unusable.");
                Close();
            }

            return prodName;
        }
        //enumerate Dirs
        private void enumerateDir(String WorkingPath)
        {
            //update progess bar
            progresbarupdate();
            //print out that the host is being searched for zeus 2
            output.AppendText("\n" + "\\\\" + target + " ,enumerating "+ WorkingPath+"...\n");
            //try
            try
            {
                //enumerate application data folder for each user
                // get your folders (names)
                string[] appDataDirectories = Directory.GetDirectories(WorkingPath);
                // Now read the creation time for each file
                DateTime[] creationTimes = new DateTime[appDataDirectories.Length];
                for (int i = 0; i < appDataDirectories.Length; i++)
                {
                    creationTimes[i] = new FileInfo(appDataDirectories[i]).CreationTime;
                }
                // sort it
                Array.Sort(creationTimes, appDataDirectories);
                //for each file path
                output.AppendText("Directories:\n");
                foreach (string fullPath in appDataDirectories)
                {
                    //update progess bar
                    progresbarupdate();
                    //split file path in to parts
                    string[] folders = fullPath.Split('\\');
                    //print out create time, last write time, and last access time for directory
                    DateTime creationTimeUtc = Directory.GetCreationTimeUtc(fullPath);
                    String ctime = creationTimeUtc.ToString();
                    //create String
                    String printable = String.Format("{0,-50}\t{1}", ctime, fullPath);
                    output.AppendText(printable + "\n");
                }
                
            }
            //catch all excepetions
            catch (Exception ex)
            {
                output.AppendText(ex.Message + "\n");
                //throw;
            }
            //update progess bar
            progresbarupdate();
        }
        //enumerate Dirs
        private void enumerateFiles(String WorkingPath)
        {
            try
            {
                //update progess bar
                progresbarupdate();
                //create array called files
                //enumerate application data folder for each user
                //"\\\\" + target + "\\c$\\Documents and Settings\\");
                // get your files (names)
                string[] appDataFiles = Directory.GetFiles(WorkingPath);
                // Now read the creation time for each file
                DateTime[] creationTimes = new DateTime[appDataFiles.Length];
                for (int i = 0; i < appDataFiles.Length; i++)
                {
                    creationTimes[i] = new FileInfo(appDataFiles[i]).CreationTime;
                }
                // sort it
                Array.Sort(creationTimes, appDataFiles);
                //for each file path
                output.AppendText("Files:\n");
                foreach (string fullPath in appDataFiles)
                {
                    //update progess bar
                    progresbarupdate();
                    //split file path in to parts
                    string[] files = fullPath.Split('\\');
                    //print out create time, last write time, and last access time for directory
                    DateTime creationTimeUtc = Directory.GetCreationTimeUtc(fullPath);
                    String ctime = creationTimeUtc.ToString();
                    //create String
                    String printable = String.Format("{0,-50}\t{1}", ctime, fullPath);
                    output.AppendText(printable + "\n");
                }
            }
            //catch all excepetions
            catch (Exception ex)
            {
                output.AppendText(ex.Message + "\n");
                //throw;
            }
            //update progess bar
            progresbarupdate();
        }
        //get users
        private void getUsers(String OSversion)
        {
            if (OSversion == "win7")
            {
                try
                {
                    //update progess bar
                    progresbarupdate();
                    //create directories array and populate with all folders in c$\Documents and Settings
                    string[] directories = Directory.GetDirectories("\\\\" + target + "\\c$\\Users\\");
                    //create list called users
                    users = new List<string>();
                    //loop through directories array
                    foreach (string dir in directories)
                    {
                        //split file path in to parts
                        string[] words = dir.Split('\\');
                        //get length of array
                        int arraylen = words.Length;
                        //username is last element in array
                        string user = words[arraylen - 1];
                        //add username to list
                        users.Add(user);
                    }
                    /*
                    foreach (String printUser in users)
                    {
                        output.AppendText(printUser + "\n");
                    }
                     */
                }
                //catch all exceptions
                catch (Exception ex)
                {
                    output.AppendText(ex.Message + "\n");
                    //throw;
                }
            }
            else
            {
                try
                {
                    //update progess bar
                    progresbarupdate();
                    //create directories array and populate with all folders in c$\Documents and Settings
                    string[] directories = Directory.GetDirectories("\\\\" + target + "\\c$\\Documents and Settings\\");
                    //create list called users
                    users = new List<string>();
                    //loop through directories array
                    foreach (string dir in directories)
                    {
                        //split file path in to parts
                        string[] words = dir.Split('\\');
                        //get length of array
                        int arraylen = words.Length;
                        //username is last element in array
                        string user = words[arraylen - 1];
                        //add username to list
                        users.Add(user);
                    }
                    /*
                    foreach (String printUser in users)
                    {
                        output.AppendText(printUser + "\n");
                    }
                    */
                }
                //catch all exceptions
                catch (Exception ex)
                {
                    output.AppendText(ex.Message + "\n");
                    //throw;
                }
            }
        }
        //outputs help message
        private void helpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //print out help message
            String help1 = "This application will search a host or a list of hosts (comma seperated) for files in known locations.";
            String help2 = "Run application with your Admin account.";
            String custom = "Custom File Path:\n";
            String custom1 = "<all> = all users - example: c$\\Users\\<all>\\AppData\\Roaming\\\n";
            String custom2 = "c$ = c: - example: c$\\Users\\<all>\\AppData\\Roaming\\\n";
            String custom3 = "do not include a hostname - exmaple: c$\\Users\\<all>\\AppData\\Roaming\\\n";
            string hostip = "Hostname/IP:\n";
            String help3 = hostip + "To search host(s) for malware, enter in hostname(s) or IP(s) of the host(s)\nyou wish to search in the Hostname(s)/IP(s) field then click the Run button";
            String help5 = "how to detect Malware:\nLook through output for randomly generated folder/file names and a file creation time of the day of the infection alert.";
            String help6 = custom + "To search a custom path, check the \"Specify Path\" checkbox and paste a file path into the text box next to the checkbox." +
                "\nPlease adhere to the following standards:\n" + custom1 + custom2 + custom3;

            //popup with all help information
            MessageBox.Show(string.Format("{0}\n{1}\n\n{2}\n\n{3}\n\n{4}" + "\n\nUse Ctrl+C to copy to clipboard", help1, help2, help3, help5,help6), "Help");
        }
        //clear output field
        private void clearOutput_Click(object sender, EventArgs e)
        {
            output.Text = null;
            hosts = null;
            target = null;
            applicationData = null;
            rootDir = null;
            userTemp = null;
            userSpec = null;
            ApplicationDataFolders = null;
            RootDirFolders = null;
            UserTempFolders = null;
            ApplicationDataFiles = null;
            RootDirFiles = null;
            UserTempFiles = null;
            users = null;
        }
        //user specified paths
        private void customPath(String WorkingPath)
        {
            //path examples
            //\\laptopName\c$\Users\corpID\AppData\Roaming\
            //c:\\Users\corpID\AppData\Roaming\
            //c$\Users\corpID\AppData\Roaming\
            //c$\Users\<all>\AppData\Roaming\
            //enumerate application data folder for each user
            String pathEdit = WorkingPath.ToLower();
            try
            {

                if (pathEdit.Contains("<all>"))
                {
                    foreach (string CID in users)
                    {
                        String edited = pathEdit.Replace("<all>", CID);
                        edited = edited.Replace("\\", "\\\\");
                        edited = "\\\\" + target + "\\" + edited;
                        //update progess bar
                        progresbarupdate();
                        enumerateDir(edited);
                        enumerateFiles(edited);
                        output.AppendText("\n====================================================================\n\n");
                    }
                }
                else
                {
                    //update progess bar
                    progresbarupdate();
                    String edited = pathEdit.Replace("\\", "\\\\");
                    edited = "\\\\" + target + "\\" + edited;
                    enumerateDir(edited);
                    enumerateFiles(edited);
                }
            }
            //catch all excepetions
            catch (Exception ex)
            {
                output.AppendText(ex.Message + "\n");
                //throw;
            }
        }

        //empty classes
        private void AppicationData_CheckedChanged(object sender, EventArgs e)
        {

        }
        private void RootDir_CheckedChanged(object sender, EventArgs e)
        {

        }
        private void UserTemp_CheckedChanged(object sender, EventArgs e)
        {

        }
        private void host_TextChanged(object sender, EventArgs e)
        {
        
        }
        private void status_Click(object sender, EventArgs e)
        {
        
        }
        private void Form1_Load(object sender, EventArgs e)
        {

        }
        private void Specifycorpid_TextChanged(object sender, EventArgs e)
        {

        }
        private void specifyUser_CheckedChanged(object sender, EventArgs e)
        {

        }
        private void output_TextChanged(object sender, EventArgs e)
        {

        }
        private void specifiedPath_TextChanged(object sender, EventArgs e)
        {

        }
        private void userPath_CheckedChanged(object sender, EventArgs e)
        {

        }


    }
}
