# Noriben Sandbox Automation Script
# conversion from bash to python for crossplatform usability
# Responsible for:
# * Copying malware into a known VM
# * Running malware sample
# * Copying off results
#
# Ensure you set the environment variables below to match your system
##############################################################
# imports
import sys
from sys import platform as _platform
import os
import getpass
import subprocess

# Global variables
##############################################################
# guest based configuration variables
# variable for execution delay
DELAY = 10
# noriben path on guest
NORIBEN_PATH = "\"C:\\Users\\master\\Downloads\\Noriben.py\""
# zipped noriben results path on guest
ZIP_PATH = "\"C:\\Tools\\zip.exe\""
# noriben results path on guest
LOG_PATH = "\"C:\\Noriben_Logs\""
# python path on guest
PYTHON_PATH = "\"C:\\Users\\master\\AppData\\Local\\Programs\\Python\\Python36\\python.exe\""
# procmon path on guest
PROCMONPATH = "\"C:\\Users\\master\\Downloads\\chrome.exe\""
# procmon configuration file path on guest
PROCMONCONFIGPATH = "\"C:\\Users\\master\\Downloads\\ProcmonConfiguration.pmc\""
# sample path on guest
MALWARE_PATH = "\"C:\\Users\\master\\Downloads\\Malware.exe\""


##############################################################

##############################################################
def RunMalware(OSARG):
    # ['rnolette',
    # 'test',
    # '/Applications/VMware Fusion.app/Contents/Library/vmrun',
    # '/Users/rnolette/Documents/Virtual Machines.localized/noriben.vmwarevm/noriben.vmx',
    # 'Baseline',
    # 'master',
    # 'master',
    # '/Users/rnolette/Downloads/Procmon.exe',
    # '/Users/rnolette/Downloads/ProcmonConfiguration.pmc']
    # revert vm to baseline snapshot
    # "$VMRUN" -T ws revertToSnapshot "$VMX" "$VM_SNAPSHOT"
    revertSnapshot = OSARG[2] + " -T ws revertToSnapshot " + OSARG[3] + " " + OSARG[4]
    subprocess.call([revertSnapshot], shell=True)
    # start revert vm (aka poweron)
    startVM = OSARG[2] + " -T ws start " + OSARG[3]
    subprocess.call([startVM], shell=True)
    # opy over procmon to guest VM
    cpProcmon = OSARG[2] + " -gu " + OSARG[5] + " -gp " + OSARG[6] + " copyFileFromHostToGuest " + OSARG[3] + " " + OSARG[7] + " " + PROCMONPATH
    subprocess.call([cpProcmon], shell=True)
    # copy over procmon config file to guest VM
    cpProcConfig = OSARG[2] + " -gu " + OSARG[5] + " -gp " + OSARG[6] + " copyFileFromHostToGuest " + OSARG[3] + " " + OSARG[8] + " " + PROCMONCONFIGPATH
    subprocess.call([cpProcConfig], shell=True)
    # copy over Malware Sample to guest VM
    cpMalware = OSARG[2] + " -gu " + OSARG[5] + " -gp " + OSARG[6] + " copyFileFromHostToGuest " + OSARG[3] + " " + OSARG[9] + " " + MALWARE_PATH
    subprocess.call([cpMalware], shell=True)
    ##############################################################
    # # run malware sample on guest VM
    # "$VMRUN" -T ws -gu $VM_USER -gp $VM_PASS runProgramInGuest "$VMX" "$PYTHON_PATH" "$NORIBEN_PATH" -d -t $DELAY --cmd "$MALWARE_PATH" --output "$LOG_PATH"
    # if [ $? -gt 0 ]; then
    #     echo "[!] File did not execute in VM correctly."
    #     exit
    # fi
    # ##############################################################
    # # zip up norien report
    # "$VMRUN" -T ws -gu $VM_USER -gp $VM_PASS runProgramInGuest "$VMX" "$ZIP_PATH" -j C:\\NoribenReports.zip "$LOG_PATH\\*.*"
    # if [ $? -eq 12 ]; then
    #     echo "[!] ERROR: No files found in Noriben output folder to ZIP."
    #     exit
    # fi
    # ##############################################################
    # # copy zipped noriben report files to host
    # "$VMRUN" -gu $VM_USER -gp $VM_PASS copyFileFromGuestToHost "$VMX" C:\\NoribenReports.zip $PWD/NoribenReports_$FILENAME.zip"

    # print OSARG


##############################################################
def Mac():
    OSARG = list()
    # host based configuration variables
    # current username
    USERNAME = getpass.getuser()
    OSARG.append(USERNAME)
    # used for noriben output files ------- unix only. need to make crossplatform
    if "/" in sys.argv[-1]:
        path = sys.argv[-1].split("/")
        FILENAME = path[-1]
    else:
        FILENAME = sys.argv[-1]
    OSARG.append(FILENAME)
    # full path to vmrun binary. this is required to be referenced in the full
    # path everytime
    VMRUN = "\"/Applications/VMware Fusion.app/Contents/Library/vmrun\""
    OSARG.append(VMRUN)
    # full path to noriben victim vm vmx file
    VMX = "\"/Users/" + USERNAME + \
        "/Documents/Virtual Machines.localized/noriben.vmwarevm/noriben.vmx\""
    OSARG.append(VMX)
    # this is the name of the snapshot to revert the vm to
    VM_SNAPSHOT = "\"Baseline\""
    OSARG.append(VM_SNAPSHOT)
    # guest VM username and password
    VM_USER = "master"
    VM_PASS = "master"
    OSARG.append(VM_USER)
    OSARG.append(VM_PASS)
    # local host file path for procmon
    PROCMON = "\"/Users/" + USERNAME + "/Downloads/Procmon.exe\""
    OSARG.append(PROCMON)
    # local host file path for procmon configuration file
    PROCMONCONFIG = "\"/Users/" + USERNAME + "/Downloads/ProcmonConfiguration.pmc\""
    OSARG.append(PROCMONCONFIG)
    # reads in commandline arguement for sample
    MALWAREFILE = sys.argv[1]
    OSARG.append(MALWAREFILE)
    # send variables to run malware function
    RunMalware(OSARG)


# ##############################################################
# def Linux():
#
# ##############################################################
# def Windows():

##############################################################
# did you include an arugment?
if len(sys.argv) == 1:
    print "Please provide executable filename as an argument."
    print "For example:"
    print "$0 ~/malware/ef8188aa1dfa2ab07af527bab6c8baf7"
    sys.exit()
##############################################################
if _platform == "linux" or _platform == "linux2":
    # linux
    # clear Screen
    os.system('clear')
    # print OS
    # print "i'm running Linux"
elif _platform == "darwin":
    # MAC OS X
    # clear Screen
    os.system('clear')
    # print OS
    # print "i'm running mac"
    Mac()
elif _platform == "win32":
    # Windows
    # clear Screen
    os.system('cls')
    # print OS
    # print "i'm running Windows"
