using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Text.RegularExpressions;

namespace MalwareCentral
{
    public partial class CorrelationApplication : Form
    {
        public CorrelationApplication()
        {
            InitializeComponent();
        }



        private void RunButton_Click(object sender, EventArgs e)
        {
            String ipAddr = ipAddress.Text.ToString();
            String daysPrior = daysToSearch.Text.ToString();
            //outputText.AppendText(ipAddr + "\n" + daysPrior + "\n");
            if (ipAddr.Contains(","))
            {
                string[] hosts = ipAddr.Split(',');
                foreach (string client in hosts)
                {
                    ipAddr = client.Trim();
                    //send host to get checked
                    queryIP(ipAddr, daysPrior);
                    //outputText.AppendText("\n=====================================================\n\n");
                }
            }
            else
            {

                //send host to get checked
                queryIP(ipAddr, daysPrior);
            }
        }
        private void queryIP(String ipAddr, String daysPrior)
        {
            #region hostname
            //hostname
            #region open db
            string DbConnectionString = string.Empty;
            SqlConnection DbConnection = new SqlConnection();
            DbConnectionString = "Data Source=hostname.domain.com;Integrated Security=SSPI;Initial Catalog=UserSessionMonitor;Connect Timeout=240;";
            DbConnection.ConnectionString = DbConnectionString;
            //open connection to database
            //if the database connection is not open
            if (DbConnection.State != System.Data.ConnectionState.Open)
            {
                try
                {
                    //open database connection
                    DbConnection.ConnectionString = DbConnectionString;
                    DbConnection.Open();
                }
                catch (Exception)
                {
                    outputText.AppendText("The initial connection to UserSessionMonitor on hostname has timed out.\n");
                }
            }
            #endregion open db
            //query
            #region query db
            try
            {
                //create sql reader to display data
                SqlDataReader myReader = null;
                //create string to enter data into database
                string insString = @"select distinct h.[date] as Session_Date,  dbo.esec_toIpChar(h.ip) as Session_IP,  h.name as Session_Hostname,  u.[name] as Session_UserCorpID
                                      , h.location as Session_HostLocation
                                      , a.MODEL_CATEGORY as HostName_ModelCategory,  a.LOCATION_NAME as HostName_Location_Name
                                      , a.TO_BU_DESC as HostName_To_BU_Desc,  a.BU_TECH_CONTACT_BARCODE as HostName_BU_TechContact,  a.TECHCONTACT_BARCODE as HostName_TechContact
                                      , p.[Column 1] as User_Name,  p.[Column 103] as User_BUSINESS_TITLE,  p.[Column 117] as User_BUSINESS_UNIT_DESC,  p.[Column 43] as User_Phone
                                from [History - IP USER] u with(nolock)
                                    left outer join [History - IP HOST] h with(nolock)  on  h.ip = u.ip and h.[date] = u.[date]
                                      join SOC_Feed.dbo.assetcenter a with(nolock)  on h.[name] = a.HOSTNAME
                                      join SOC_Feed.dbo.people_central_feed p with(nolock) on u.[name] = p.[Column 0]
                                where u.IP = dbo.esec_toIpNum(@ipaddr)
                                      and DATEDIFF(d, u.[date], getdate()) <= @days
                                      and a.MODEL_CATEGORY not like '%server%'
                                      and a.MODEL_CATEGORY not like '%storage%'
                                      and a.MODEL_CATEGORY not like '%Network%'
                                order by  Session_IP, Session_Date, Session_Hostname";
                SqlCommand myCommand = new SqlCommand(insString, DbConnection);
                //populate and sanitize parameters
                myCommand.Parameters.Add("@days", SqlDbType.VarChar, 100);
                myCommand.Parameters["@days"].Value = daysPrior;
                myCommand.Parameters.Add("@ipaddr", SqlDbType.VarChar, 100);
                myCommand.Parameters["@ipaddr"].Value = ipAddr;
                //execute the command
                myReader = myCommand.ExecuteReader();
                //print title line
                outputText.AppendText("Session_Date\tSession_IP\tSession_Hostname\tSession_UserCorpID\n");
                //read all results and print them to output
                while (myReader.Read())
                {
                    //Session_Date	Session_IP	    Session_Hostname	Session_UserCorpID
                    //2011-09-23	    192.168.1.2	laptopName	        corpID
                    String datemix = myReader["Session_Date"].ToString();
                    String[] sessionDate = datemix.Split(' ');
                    outputText.AppendText(
                                         sessionDate[0] + "\t"
                                        + myReader["Session_IP"].ToString() + "\t"
                                        + myReader["Session_Hostname"].ToString() + "\t"
                                        + myReader["Session_UserCorpID"].ToString() + "\n"
                                        );
                }
            }
            catch (Exception)
            {
                outputText.AppendText("The query connection to the datebase has timed out.\n");
            }
            #endregion query db
            #region close db
            //close db connection
            if (DbConnection.State == System.Data.ConnectionState.Open)
            {
                //close connection
                DbConnection.Close();
            }
            #endregion close db


            #endregion hostname

            //update progess bar
        }
        private void ipAddress_TextChanged(object sender, EventArgs e)
        {

        }

        private void daysToSearch_TextChanged(object sender, EventArgs e)
        {

        }

        private void outputText_TextChanged(object sender, EventArgs e)
        {

        }

        private void helpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //print out help message
            String help1 = "This application accept an IP address and correlate it to corpids for the user defined set of days prior.";
            String help2 = "Run application with your Admin account.";
            string hostip = "IP Address:\n";
            String help3 = hostip + "To search accept an IP address and correlate it to corpids for the user defined set of days prior, enter in an IP of the host you wish to search in the IP Address field then click the Run button";
            //popup with all help information
            MessageBox.Show(string.Format("{0}\n{1}\n\n{2}" + "\n\nUse Ctrl+C to copy to clipboard", help1, help2, help3), "Help");
        }

        private void ClearOuput_Click(object sender, EventArgs e)
        {
            outputText.Clear();
        }
    }
}
