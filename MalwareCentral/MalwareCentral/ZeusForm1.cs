using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using System.Xml;
using Microsoft.Win32;


namespace MalwareCentral
{

    public partial class Zeus : Form
    {
        //gloabl variables
        private String host = "";
        private List<String> zeus1Files = new List<String>();
        private List<String> zeus2Files = new List<String>();
        private List<String> zeus2reg = new List<String>();
        private List<string> users = new List<string>();
        //private int malwareCount = 0;
        //private DateTime creationDate;

        //create GUI
        public Zeus()
        {
            InitializeComponent();

        }
        //exit application
        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //this command forcefully exits the application
            Application.Exit();
        }
        //one host at a time button
        private void Run_Click(object sender, EventArgs e)
        {
            //update progess bar
            label3.Text = "0%";
            progressBar1.Value = 0;
            progressBar1.PerformStep();
            progresbarupdate();
            //get host
            String getHost = Host.Text.ToString();
            string trim = getHost.Replace(" ", "");
            host = trim;
            if (host.Contains(","))
            {
                string[] hosts = host.Split(',');
                foreach (string client in hosts)
                {
                    host = client.Trim();
                    //send host to get checked
                    pingHost();
                    Output.AppendText("\n=========================================================================\n\n");
                }
            }
            else
            {

                //send host to get checked
                pingHost();
            }
            //finish progress bar
            label3.Text = "100%";
            progressBar1.Value = 100;
            progressBar1.PerformStep();
            Output.AppendText("\n\nFinished searching " + host + ".\n");
            host = null;
        }
        //progress bar update
        private void progresbarupdate()
        {
            if (progressBar1.Value == progressBar1.Maximum)
            {
                //button1.Enabled = true;
                label3.Text = "100%";
                return;
            }
            progressBar1.PerformStep();
            double x = (progressBar1.Value / progressBar1.Maximum) * 100.0;
            label3.Text = String.Format("{0}%", x);
        }
        //this will obtain the os version from host
        private String GETOSMethod()
        {
            String prodName = null;
            if(host.Length >= 1)
            {
                //using the registry get the name and version of the OS
                using (var reg = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, host))
                using (var key = reg.OpenSubKey(@"Software\Microsoft\Windows NT\CurrentVersion\"))
                {
                    //MessageBox.Show(string.Format("Host:\n{0}\n\nName:\n{1}\n\nVersion:\n{2}", host, key.GetValue("ProductName"), key.GetValue("CurrentVersion")));
                     prodName = key.GetValue("ProductName").ToString();
                }
            }
            else
            {
                MessageBox.Show("Error: Hostname is unusable.");
                Close();
            }

            return prodName;
        }
        //this button gets the OS version and name from the host
        private void GETOS_Click(object sender, EventArgs e)
        {
            if (host.Length >= 1)
            {
                //using the registry get the name and version of the OS
                //using the registry get the name and version of the OS
                using (var reg = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, host))
                using (var key = reg.OpenSubKey(@"Software\Microsoft\Windows NT\CurrentVersion\"))
                {
                    MessageBox.Show(string.Format("Host:\n{0}\n\nName:\n{1}\n\nVersion:\n{2}", host, key.GetValue("ProductName"), key.GetValue("CurrentVersion")) + "\n\nUse Ctrl+C to copy to clipboard");
                }
            }
            else
            {
                MessageBox.Show("Error: Hostname is unusable.");
            }
        }
        //multiple host file button
        private void button2_Click(object sender, EventArgs e)
        {
            //update progess bar
            label3.Text = "0%";
            progressBar1.Value = 0;
            progressBar1.PerformStep();
            progresbarupdate();
            //cycle through desktops
            //get file path
            string filePath = textBox1.Text;
            string line;
            //create file reader
            StreamReader file = null;
            //try to read the file
            try
            {
                //get lines from file
                file = new StreamReader(filePath);
                //while there are still lines in the file
                while ((line = file.ReadLine()) != null)
                {
                    //send hostname to be checked
                    //pingHost(line);
                    string rmwhitespace = line.Replace(" ", "");
                    rmwhitespace = rmwhitespace.Replace("\r", "");
                    rmwhitespace = rmwhitespace.Replace("\n", "");
                    rmwhitespace = rmwhitespace.Replace("\t", "");
                    host = rmwhitespace;
                    pingHost();
                }
            }
            //when there are no more host names close the file
            finally
            {
                //if file is not null then close file
                if (file != null)
                    file.Close();
            }
            //finish progress bar
            label3.Text = "100%";
            progressBar1.Value = 100;
            progressBar1.PerformStep();
            //Output.AppendText(InputFile);
            MessageBox.Show("Job Complete");
        }
        //ping each host
        private void pingHost()
        {

            //try
            try
            {
                //if host string exists
                if (host.Length > 0)
                {
                    //ping host
                    Ping objping = new Ping();
                    PingReply objpingreply = objping.Send(host, 1000);
                    //if ping was successfull
                    if (objpingreply.Status == IPStatus.Success)
                    {
                        //import data for the whitelists - added after application was written
                        ImportData();
                        //print out that ping succeeded
                        //string pingable = System.String.Concat("\n" + host + " ,is alive\n");
                        string pingable = System.String.Concat("\nPing " + objpingreply.Status.ToString() +" to "+ host + "\n");
                        Output.AppendText(pingable);

                        //go to OS check
                        //if os is win7
                        if (GETOSMethod().Contains("Windows 7"))
                        {
                            //go to this subroutine
                            Win7Enumerate();
                        }
                        //if os is winxp
                        else if (GETOSMethod().Contains("XP"))
                        {
                            //go to enumerate
                            //send host to readXML section
                            enumerate();
                        }
                        //if os is not XP or 7
                        else
                        {
                            //break and show user error
                            Close();
                        }

                    }
                    //if ping failed
                    else
                    {
                        //print out that ping has failed
                        //string notpingable = System.String.Concat("\n" + host + " ,is dead\n");
                        string notpingable = System.String.Concat("\nPing " + objpingreply.Status.ToString() + " to " + host + "\nAll operations aborted for " + host);
                        Output.AppendText(notpingable);
                    }
                }
                //update progess bar
                progresbarupdate();
            }
            //catch all exceptions
            catch (Exception ex)
            {
                Output.AppendText(ex.Message + "\n");
                MessageBox.Show("ERROR: Host "+ host + " does not exist.\n" + ex.Message + "\n\nUse Ctrl+C to copy to clipboard");
                //throw;
            }

        }
        //import all the list data from a database
        private void ImportData()
        {
            //create clean lists
            zeus1Files = new List<String>();
            zeus2Files = new List<String>();
            zeus2reg = new List<String>();

            #region open db
            string DbConnectionString = string.Empty;
            SqlConnection DbConnection = new SqlConnection();

            //fix the open database connection section


            //new server hostname
            //DbConnectionString = "Data Source=hostname.domain.com;Integrated Security=SSPI;Initial Catalog=SOC_Feed;Connect Timeout=120;";
            DbConnectionString = "Data Source=hostname.domain.com;Integrated Security=SSPI;Initial Catalog=MalwareCentral;Connect Timeout=120;";
            DbConnection.ConnectionString = DbConnectionString;
            //open connection to database
            //if the database connection is not open
            if (DbConnection.State != System.Data.ConnectionState.Open)
            {
                try
                {
                    //open database connection
                    DbConnection.ConnectionString = DbConnectionString;
                    DbConnection.Open();
                }
                catch (Exception e)
                {
                    // output.AppendText("Error: Query for hostnames has timed out on the server.\n");
                    //output.AppendText(e.ToString());
                    MessageBox.Show(e.ToString() + "\n\nUse Ctrl+C to copy to clipboard");
                }
            }
            #endregion open db
            #region query zeus1
            try
            {
                //create sql reader to display data
                SqlDataReader myReader = null;
                //create string to enter data into database

                string insString = @"select Zeus1Files from Zeus1Files";
                SqlCommand myCommand = new SqlCommand(insString, DbConnection);

                //execute the command
                myReader = myCommand.ExecuteReader();

                //read all results and print them to output
                while (myReader.Read())
                {
                    zeus1Files.Add(myReader["Zeus1Files"].ToString());
                }

            }
            catch (Exception)
            {
                Output.AppendText("Error: Query for zeus1 artifacts has timed out.\n");
            }
            #endregion query zeus1
            #region close db
            //close db connection
            if (DbConnection.State == System.Data.ConnectionState.Open)
            {
                //close connection
                DbConnection.Close();
            }
            #endregion close db
            #region open db
            DbConnectionString = string.Empty;
            DbConnection = new SqlConnection();

            //fix the open database connection section


            //new server hostname
            //DbConnectionString = "Data Source=hostname.domain.com;Integrated Security=SSPI;Initial Catalog=SOC_Feed;Connect Timeout=120;";
            DbConnectionString = "Data Source=hostname.domain.com;Integrated Security=SSPI;Initial Catalog=MalwareCentral;Connect Timeout=120;";
            DbConnection.ConnectionString = DbConnectionString;
            //open connection to database
            //if the database connection is not open
            if (DbConnection.State != System.Data.ConnectionState.Open)
            {
                try
                {
                    //open database connection
                    DbConnection.ConnectionString = DbConnectionString;
                    DbConnection.Open();
                }
                catch (Exception e)
                {
                    // output.AppendText("Error: Query for hostnames has timed out on the server.\n");
                    //output.AppendText(e.ToString());
                    MessageBox.Show(e.ToString() + "\n\nUse Ctrl+C to copy to clipboard");
                }
            }
            #endregion open db
            #region query zeus2Files
            try
            {
                //List<String> zeus2Files = new List<String>();
                //create sql reader to display data
                SqlDataReader myReader = null;
                //create string to enter data into database

                string insString = @"select Zeus2Files from Zeus2Files";
                SqlCommand myCommand = new SqlCommand(insString, DbConnection);

                //execute the command
                myReader = myCommand.ExecuteReader();

                //read all results and print them to output
                while (myReader.Read())
                {
                    zeus2Files.Add(myReader["Zeus2Files"].ToString());
                }

            }
            catch (Exception)
            {
                Output.AppendText("Error: Query for zeus2 artifacts has timed out.\n");
            }
            #endregion query zeus2Files
            #region close db
            //close db connection
            if (DbConnection.State == System.Data.ConnectionState.Open)
            {
                //close connection
                DbConnection.Close();
            }
            #endregion close db
            #region open db
            DbConnectionString = string.Empty;
            DbConnection = new SqlConnection();

            //fix the open database connection section


            //new server hostname
            //DbConnectionString = "Data Source=hostname.domain.com;Integrated Security=SSPI;Initial Catalog=SOC_Feed;Connect Timeout=120;";
            DbConnectionString = "Data Source=hostname.domain.com;Integrated Security=SSPI;Initial Catalog=MalwareCentral;Connect Timeout=120;";
            DbConnection.ConnectionString = DbConnectionString;
            //open connection to database
            //if the database connection is not open
            if (DbConnection.State != System.Data.ConnectionState.Open)
            {
                try
                {
                    //open database connection
                    DbConnection.ConnectionString = DbConnectionString;
                    DbConnection.Open();
                }
                catch (Exception e)
                {
                    // output.AppendText("Error: Query for hostnames has timed out on the server.\n");
                    //output.AppendText(e.ToString());
                    MessageBox.Show(e.ToString() + "\n\nUse Ctrl+C to copy to clipboard");
                }
            }
            #endregion open db
            #region query zeus2Reg
            try
            {
                //List<String> zeus2Reg = new List<String>();
                //create sql reader to display data
                SqlDataReader myReader = null;
                //create string to enter data into database

                string insString = @"select Zeus2Reg from Zeus2Reg";
                SqlCommand myCommand = new SqlCommand(insString, DbConnection);

                //execute the command
                myReader = myCommand.ExecuteReader();

                //read all results and print them to output
                while (myReader.Read())
                {
                    zeus2reg.Add(myReader["Zeus2Reg"].ToString());
                }

            }
            catch (Exception)
            {
                Output.AppendText("Error: Query for zeus2 artifacts has timed out.\n");
            }
            #endregion query zeus2Reg
            #region close db
            //close db connection
            if (DbConnection.State == System.Data.ConnectionState.Open)
            {
                //close connection
                DbConnection.Close();
            }
            #endregion close db
        }
        //enumerate c$\Documents and Settings to get user names
        private void enumerate()
        {
            //try
            try
            {
                //update progess bar
                progresbarupdate();
                //create directories array and populate with all folders in c$\Documents and Settings
                string[] directories = Directory.GetDirectories("\\\\" + host + "\\c$\\Documents and Settings\\");
                //create list called users
                List<string> users = new List<string>();
                //loop through directories array
                foreach (string dir in directories)
                {
                    //split file path in to parts
                    string[] words = dir.Split('\\');
                    //get length of array
                    int arraylen = words.Length;
                    //username is last element in array
                    string user = words[arraylen - 1];
                    //add username to list
                    users.Add(user);
                }
            }
            //catch all exceptions
            catch (Exception ex)
            {
                Output.AppendText(ex.Message + "\n");
                //throw;
            }
            //check zeus1
            zeus1Check();
        }
        //check for zeus V1
        private void zeus1Check()
        {
            //update progess bar
            progresbarupdate();
            //searching for zeus 1
            Output.AppendText("\n" + "\\\\" + host + " ,searching for zeus 1...");
            //counter used to tell if there is zeus or not
            int count = 0;
            //try
            try
            {
                //check for each zeus1 file
                foreach (string i in zeus1Files)
                {
                    string path = System.String.Concat("\\\\", host, "\\", i);
                    //if zeus1 file exists
                    if (File.Exists(path))
                    {
                        //show which zeus1 file exists
                        path = System.String.Concat(path, ", found.\n");
                        Output.AppendText("\n" + path);
                        //print out create time, last write time, and last access time for file
                        DateTime creationTimeUtc = File.GetCreationTimeUtc(path);
                        DateTime lastWriteTimeUtc = File.GetLastWriteTimeUtc(path);
                        DateTime lastAccessTimeUtc = File.GetLastAccessTimeUtc(path);
                        Output.AppendText("creationTimeUtc: " + creationTimeUtc + "\n");
                        Output.AppendText("lastWriteTimeUtc: " + lastWriteTimeUtc + "\n");
                        Output.AppendText("lastAccessTimeUtc: " + lastAccessTimeUtc + "\n");
                        count++;
                    }
                }
                //no zeus1 files found
                if (count == 0)
                {
                    //display that no zeus1 files are found
                    string nf = System.String.Concat("\n" + "\\\\", host, " ,Zeus1 not Found.\n");
                    Output.AppendText(nf);
                }
            }
            catch (Exception ex)
            {
                Output.AppendText(ex.Message + "\n");
                //throw;
            }
            //check zeus2
            zeus2Check();

        }
        //check for zeus V2
        private void zeus2Check()
        {
            //update progess bar
            progresbarupdate();
            //print out that the host is being searched for zeus 2
            Output.AppendText("\n" + "\\\\" + host + " ,searching for zeus 2...");
            //try
            try
            {
                //create array called directories
                string[] directories = Directory.GetDirectories("\\\\" + host + "\\c$\\Documents and Settings\\");
                Output.AppendText("\n----------------" + "Checking folders: " + "\\\\" + host + "\\c$\\Documents and Settings\\" + "----------------");
                // for each directory in the directories array
                foreach (string dir in directories)
                {
                    //enumerate application data folder for each user
                    string[] appDataDirectories = Directory.GetDirectories(dir + "\\Application Data");
                    //for each file path
                    foreach (string fullPath in appDataDirectories)
                    {
                        //split file path in to parts
                        string[] folders = fullPath.Split('\\');
                        //get length of array
                        int folderlen = folders.Length;
                        //folder is last element in array
                        string folder = folders[folderlen - 1];
                        //if folder is whitelisted
                        if ((zeus2Files.Contains(folder)) || (folder.Length > 7))
                        {
                            //do nothing
                        }
                        //if folder is not whitelisted
                        else
                        {
                            //print out which folders are not whitelisted
                            string pt = System.String.Concat(fullPath, ", not whitelisted\n");
                            Output.AppendText("\n" + pt);
                            //print out create time, last write time, and last access time for directory
                            DateTime creationTimeUtc = Directory.GetCreationTimeUtc(fullPath);
                            DateTime lastWriteTimeUtc = Directory.GetLastWriteTimeUtc(fullPath);
                            DateTime lastAccessTimeUtc = Directory.GetLastAccessTimeUtc(fullPath);
                            Output.AppendText("creationTimeUtc: " + creationTimeUtc + "\n");
                            Output.AppendText("lastWriteTimeUtc: " + lastWriteTimeUtc + "\n");
                            Output.AppendText("lastAccessTimeUtc: " + lastAccessTimeUtc + "\n");

                        }

                    }
                }
            }
            //catch all excepetions
            catch (Exception ex)
            {
                Output.AppendText(ex.Message + "\n");
                //throw;
            }
            //check zeus2 registry
            zeus2regCheck();
        }
        //check for zeus V2 registry values
        private void zeus2regCheck()
        {
            //update progess bar
            progresbarupdate();
            //lists of registries
            List<string> hkey = new List<string>();
            List<string> names = new List<string>();
            //try
            try
            {
                // Open HKEY_USERS
                // on a remote computer.
                string remoteName = host;
                RegistryKey environmentKey = RegistryKey.OpenRemoteBaseKey(RegistryHive.Users, remoteName);
                //put all hkey_user entries in list
                foreach (string subKeyName in environmentKey.GetSubKeyNames())
                {
                    //add SID to hkey list
                    hkey.Add(subKeyName);
                }
                //go through the list and enumerate each one
                foreach (string sid in hkey)
                {
                    //get the subkeys of each SID under hkey
                    RegistryKey sids = RegistryKey.OpenRemoteBaseKey(RegistryHive.Users, remoteName).OpenSubKey(sid);
                    //for each id under hkey
                    foreach (string id in sids.GetSubKeyNames())
                    {
                        //create SID path and add to names list
                        string SIDpath = sid + "\\" + id;
                        names.Add(SIDpath);
                    }

                }
                // Close the registry key.
                environmentKey.Close();
                Output.AppendText("\n----------------" + "Checking Registry: " + "\\\\" + host + "----------------");
                //check if reg entry is whitelisted
                foreach (string fname in names)
                {
                    //create path to check
                    String fullPath = "\\\\" + host + "\\" + fname;
                    //split file path in to parts
                    string[] folders = fname.Split('\\');
                    //get length of array
                    int folderlen = folders.Length;
                    //folder is last element in array
                    string folder = folders[folderlen - 1];
                    //if folder is whitelisted
                    if ((zeus2reg.Contains(folder)) || (folder.Length > 6))
                    {
                        //do nothing
                    }
                    //if folder is not whitelisted
                    else
                    {
                        //print out which folders are not whitelisted
                        string pt = System.String.Concat("\n" + fullPath + ", not whitelisted\n");
                        Output.AppendText(pt);

                    }
                }

            }
            //catch all exceptions
            catch (Exception ex)
            {
                Output.AppendText(ex.Message + "\n");
                //throw;
            }

        }
        //displays help menu popup
        private void helpToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            //print out help message
            String help1 = "This application will search a host or a list of hosts for files associated with Zeus.";
            String help2 = "Run application with your Admin account.";
            string hostip = "Hostname/IP:\n";
            string hostlist = "List of Hosts:\n";
            String help3 = hostip + "To search one host for Zeus enter in hostname or IP of the host\nyou wish to search in the Hostname/IP field then click the Run button";
            String help4 = hostlist + "To search multiple hosts for Zeus click browse to find file containing\nhostnames/IPs of the hosts you wish to search then click the Run List button";
            String help5 = "how to detect Zeus:\nLook through output for randomly generated folder/file names and a file creation time of the day of the infection alert.";
            //popup with all help information
            MessageBox.Show(string.Format("{0}\n{1}\n\n{2}\n\n{3}\n\n{4}" + "\n\nUse Ctrl+C to copy to clipboard", help1, help2, help3, help4, help5), "Help");
        }
        //browse for list of hosts
        private void button1_Click(object sender, EventArgs e)
        {
            //file browser
            OpenFileDialog fdlg = new OpenFileDialog();
            //title of window
            fdlg.Title = "List of Hosts to check";
            //default start directory
            fdlg.InitialDirectory = @"c:\Documents and Settings\Desktop";
            //what files to filter for
            fdlg.Filter = "All files (*.*)|*.*|All files (*.*)|*.*";
            //file index
            fdlg.FilterIndex = 2;
            //easy directory restore
            fdlg.RestoreDirectory = true;
            //if file exists
            if (fdlg.ShowDialog() == DialogResult.OK)
            {
                //send file path to text field
                textBox1.Text = fdlg.FileName;
            }
        }
        //this button pings the host
        private void PingButton_Click(object sender, EventArgs e)
        {
            //try
            try
            {
                //if host string exists
                if ((!host.Contains("LocalHost")))
                {
                    //ping host
                    Ping objping = new Ping();
                    PingReply objpingreply = objping.Send(host);
                    //if ping was successfull
                    if (objpingreply.Status == IPStatus.Success)
                    {
                        //print out that ping succeeded
                        string pingable = System.String.Concat(host, " is alive and pingable\n");
                        MessageBox.Show(pingable + "\n\nUse Ctrl+C to copy to clipboard");
                    }
                    //if ping failed
                    else
                    {
                        //print out that ping has failed
                        String notpingable = host + " is not pingable\n";
                        MessageBox.Show(notpingable + "\n\nUse Ctrl+C to copy to clipboard");


                    }
                }
                else
                {
                    String message = "You are pinging the Localhost. The localhost is your machine. Please enter a hostname/ip into the host field.";
                    MessageBox.Show(message + "\n\nUse Ctrl+C to copy to clipboard");
                    //Clipboard.Clear();
                    //Clipboard.SetText(message);


                }
            }
            //catch all exceptions
            catch (Exception ex)
            {
                MessageBox.Show("ERROR: Host " + host + "does not exist.\n" + ex.Message + "\n\nUse Ctrl+C to copy to clipboard");

            }
        }
        //windows 7 variation - enumerate c$\users to get user names
        private void Win7Enumerate()
        {
            //try
            try
            {
                //update progess bar
                progresbarupdate();
                //create directories array and populate with all folders in c$\users
                string[] directories = Directory.GetDirectories("\\\\" + host + "\\c$\\Users\\");
                //create list called users
                List<string> users = new List<string>();
                //loop through directories array
                foreach (string dir in directories)
                {
                    //split file path in to parts
                    string[] words = dir.Split('\\');
                    //get length of array
                    int arraylen = words.Length;
                    //username is last element in array
                    string user = words[arraylen - 1];
                    //add username to list
                    users.Add(user);
                }
            }
            //catch all exceptions
            catch (Exception ex)
            {
                Output.AppendText(ex.Message + "\n");
                //throw;
            }
            //check zeus1
            Win7zeus1Check();
        }
        //check for zeus V1
        private void Win7zeus1Check()
        {
            //update progess bar
            progresbarupdate();
            //searching for zeus 1
            Output.AppendText("\n" + "\\\\" + host + " ,searching for zeus 1...");
            //counter used to tell if there is zeus or not
            int count = 0;
            //try
            try
            {
                //check for each zeus1 file
                foreach (string i in zeus1Files)
                {
                    string path = System.String.Concat("\\\\", host, "\\", i);
                    //if zeus1 file exists
                    if (File.Exists(path))
                    {
                        //show which zeus1 file exists
                        path = System.String.Concat(path, ", found.\n");
                        Output.AppendText("\n" + path);
                        //print out create time, last write time, and last access time for file
                        DateTime creationTimeUtc = File.GetCreationTimeUtc(path);
                        DateTime lastWriteTimeUtc = File.GetLastWriteTimeUtc(path);
                        DateTime lastAccessTimeUtc = File.GetLastAccessTimeUtc(path);
                        Output.AppendText("creationTimeUtc: " + creationTimeUtc + "\n");
                        Output.AppendText("lastWriteTimeUtc: " + lastWriteTimeUtc + "\n");
                        Output.AppendText("lastAccessTimeUtc: " + lastAccessTimeUtc + "\n");
                        count++;
                    }
                }
                //no zeus1 files found
                if (count == 0)
                {
                    //display that no zeus1 files are found
                    string nf = System.String.Concat("\n" + "\\\\", host, " ,Zeus1 not Found.\n");
                    Output.AppendText(nf);
                }
            }
            catch (Exception ex)
            {
                Output.AppendText(ex.Message + "\n");
                //throw;
            }
            //check zeus2
            Win7zeus2Check();

        }
        //check for zeus V2
        private void Win7zeus2Check()
        {
            //update progess bar
            progresbarupdate();
            String usercatch = "Can't Access users";
            //print out that the host is being searched for zeus 2
            Output.AppendText("\n" + "\\\\" + host + " ,searching for zeus 2...");
            //try
            try
            {
                //create array called directories
                string[] directories = Directory.GetDirectories("\\\\" + host + "\\c$\\Users\\");
                Output.AppendText("\n----------------" + "Checking folders: " + "\\\\" + host + "\\c$\\Users\\" + "----------------");
                // for each directory in the directories array
                foreach (string dir in directories)
                {
                    //this statement removes the symlink directory "All Users" and the junction directory "Default User"
                    if (dir.Contains("All Users"))
                    {
                    }
                    else
                    {
                        usercatch = dir;
                        //enumerate application data folder for each user
                        string[] appDataDirectories = Directory.GetDirectories(dir + "\\AppData\\Roaming");

                        //for each file path
                        foreach (string fullPath in appDataDirectories)
                        {
                            //split file path in to parts
                            string[] folders = fullPath.Split('\\');
                            //get length of array
                            int folderlen = folders.Length;
                            //folder is last element in array
                            string folder = folders[folderlen - 1];
                            //if folder is whitelisted
                            if ((zeus2Files.Contains(folder)) || (folder.Length > 7))
                            {
                                //do nothing
                            }
                            //if folder is not whitelisted
                            else
                            {
                                //print out which folders are not whitelisted
                                string pt = System.String.Concat(fullPath, ", not whitelisted\n");
                                Output.AppendText("\n" + pt);
                                //print out create time, last write time, and last access time for directory
                                DateTime creationTimeUtc = Directory.GetCreationTimeUtc(fullPath);
                                DateTime lastWriteTimeUtc = Directory.GetLastWriteTimeUtc(fullPath);
                                DateTime lastAccessTimeUtc = Directory.GetLastAccessTimeUtc(fullPath);
                                Output.AppendText("creationTimeUtc: " + creationTimeUtc + "\n");
                                Output.AppendText("lastWriteTimeUtc: " + lastWriteTimeUtc + "\n");
                                Output.AppendText("lastAccessTimeUtc: " + lastAccessTimeUtc + "\n");

                            }

                        }
                    }
                    //Output.AppendText("\n" + dir + " - Successfully Checked");
                }
            }
            //catch all excepetions
            catch (Exception ex)
            {
                Output.AppendText("\nERROR: "+ usercatch + " - " + ex.Message + "\n");
                //Output.AppendText(ex.ToString() + "\n");
                //throw;
            }
            //check zeus2 registry
            Win7zeus2regCheck();

        }
        //check for zeus V2 registry values
        private void Win7zeus2regCheck()
        {
            String regcatch = "Can't Access Registry";
            //update progess bar
            progresbarupdate();
            //lists of registries
            List<string> hkey = new List<string>();
            List<string> names = new List<string>();
            //try
            try
            {
                // Open HKEY_USERS
                // on a remote computer.
                string remoteName = host;
                RegistryKey environmentKey = RegistryKey.OpenRemoteBaseKey(RegistryHive.Users, remoteName);
                //put all hkey_user entries in list
                foreach (string subKeyName in environmentKey.GetSubKeyNames())
                {
                    //add SID to hkey list
                    hkey.Add(subKeyName);
                }
                //go through the list and enumerate each one
                foreach (string sid in hkey)
                {
                    //get the subkeys of each SID under hkey
                    RegistryKey sids = RegistryKey.OpenRemoteBaseKey(RegistryHive.Users, remoteName).OpenSubKey(sid);
                    //for each id under hkey
                    foreach (string id in sids.GetSubKeyNames())
                    {
                        //create SID path and add to names list
                        string SIDpath = sid + "\\" + id;
                        names.Add(SIDpath);
                    }

                }
                // Close the registry key.
                environmentKey.Close();
                Output.AppendText("\n----------------" + "Checking Registry: " + "\\\\" + host + "----------------");
                //check if reg entry is whitelisted
                foreach (string fname in names)
                {
                    regcatch = fname;
                    //create path to check
                    String fullPath = "\\\\" + host + "\\" + fname;
                    //split file path in to parts
                    string[] folders = fname.Split('\\');
                    //get length of array
                    int folderlen = folders.Length;
                    //folder is last element in array
                    string folder = folders[folderlen - 1];
                    //if folder is whitelisted
                    if ((zeus2reg.Contains(folder)) || (folder.Length > 6))
                    {
                        //do nothing
                    }
                    //if folder is not whitelisted
                    else
                    {
                        //print out which folders are not whitelisted
                        string pt = System.String.Concat("\n" + fullPath + ", not whitelisted\n");
                        Output.AppendText(pt);

                    }
                }

            }
            //catch all exceptions
            catch (Exception ex)
            {
                Output.AppendText("\nERROR: " + regcatch + " - " + ex.Message + "\n");
                //throw;
            }
        }


        //-----------------------not filled functions
        private void Host_TextChanged(object sender, EventArgs e)
        {

        }
        private void Output_TextChanged(object sender, EventArgs e)
        {

        }
        private void label2_Click(object sender, EventArgs e)
        {

        }
        private void textBox1_TextChanged(object sender, EventArgs e)
        {
        }
        private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }
        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            //  malwareCheck();
        }
        private void Form1_Load(object sender, EventArgs e)
        {

        }
        private void menuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }
        private void Zeus_Load(object sender, EventArgs e)
        {

        }

        private void progressBar1_Click(object sender, EventArgs e)
        {

        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void ClearOuput_Click(object sender, EventArgs e)
        {
            Output.Clear();
        }


    }
}
