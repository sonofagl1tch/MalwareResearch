using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Net;
using System.Net.NetworkInformation;
using Microsoft.Win32;
using System.Diagnostics;
using System.Xml;


namespace MalwareCentral
{

    public partial class userform : Form
    {
        //gloabl variables
        private String host = "";
        private List<string> users = new List<string>();
        private DateTime creationDate;

        //create GUI
        public userform()
        {
                InitializeComponent();
        }
        //one host at a time button
        private void Run_Click(object sender, EventArgs e)
        {
            //update progess bar
            label3.Text = "0%";
            progressBar1.Value = 0;
            progressBar1.PerformStep();
            progresbarupdate();
            //get host
            //get host
            String getHost = Host.Text.ToString();
            string trim = getHost.Replace(" ", "");
            host = trim;
            if (host.Contains(","))
            {
                string[] hosts = host.Split(',');
                foreach (string client in hosts)
                {
                    host = client.Trim();
                    //send host to get checked
                    pingHost();
                    Output.AppendText("\n=========================================================================\n\n");
                }
            }
            else
            {

                //send host to get checked
                pingHost();
            }
            //finish progress bar
            label3.Text = "100%";
            progressBar1.Value = 100;
            progressBar1.PerformStep();
            Output.AppendText("\n\nFinished searching " + host + ".\n");
        }
        //progress bar update
        private void progresbarupdate()
        {
            if (progressBar1.Value == progressBar1.Maximum)
            {
                //button1.Enabled = true;
                label3.Text = "100%";
                return;
            }
            progressBar1.PerformStep();
            double x = (progressBar1.Value / progressBar1.Maximum) * 100.0;
            label3.Text = String.Format("{0}%", x);
        }
        //this button gets the OS version and name from the host
        private void GETOS_Click(object sender, EventArgs e)
        {
            //using the registry get the name and version of the OS
            using (var reg = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, host))
            using (var key = reg.OpenSubKey(@"Software\Microsoft\Windows NT\CurrentVersion\"))
            {
                MessageBox.Show(string.Format("Host:\n{0}\n\nName:\n{1}\n\nVersion:\n{2}", host, key.GetValue("ProductName"), key.GetValue("CurrentVersion")));
            }
        }
        //ping each host
        private void pingHost()
        {
            //try
            try
            {
                //if host string exists
                if (host.Length > 0)
                {
                    //ping host
                    Ping objping = new Ping();
                    PingReply objpingreply = objping.Send(host, 1000);
                    //if ping was successfull
                    if (objpingreply.Status == IPStatus.Success)
                    {
                        //print out that ping succeeded
                        //string pingable = System.String.Concat("\n" + host + " ,is alive\n");
                        string pingable = System.String.Concat("\nPing " + objpingreply.Status.ToString() + " to " + host + "\n");
                        Output.AppendText(pingable);
                        //send host to readXML section
                        enumerate();
                    }
                    //if ping failed
                    else
                    {
                        //print out that ping has failed
                        //string notpingable = System.String.Concat("\n" + host + " ,is dead\n");
                        string notpingable = System.String.Concat("\nPing " + objpingreply.Status.ToString() + " to " + host + "\nAll operations aborted for " + host);
                        Output.AppendText(notpingable);
                    }
                }
                //update progess bar
                progresbarupdate();
            }
            //catch all exceptions
            catch (Exception ex)
            {
                Output.AppendText(ex.Message);
                MessageBox.Show("ERROR: Host " + host + "does not exist.\n" + ex.Message + "\n\nUse Ctrl+C to copy to clipboard");
                //throw;
            }

        }
        //enumerate c$\Documents and Settings to get user names
        private void enumerate()
        {
            //update progess bar
            progresbarupdate();
            //create directories array and populate with all folders in c$\Documents and Settings
            string[] directories = Directory.GetDirectories("\\\\" + host + "\\c$\\Documents and Settings\\");
            //create list called users
            users = new List<string>();
            //loop through directories array
            foreach (string dir in directories)
            {
                //split file path in to parts
                string[] words = dir.Split('\\');
                //get length of array
                int arraylen = words.Length;
                //username is last element in array
                string user = words[arraylen - 1];
                //add username to list
                //MessageBox.Show(user);
                users.Add(user);
            }
            //check malware
            malwareCheck();
        }
        //reads file of other malware file locations
        private void malwareCheck()
        {
            //update progess bar
            progresbarupdate();
            String malwarePath = textBox2.Text;
            string line;
            //create file reader
            StreamReader file = null;
            //try to read the file
            try
            {
                //get lines from file
                file = new StreamReader(malwarePath);
                //searching for malware
                Output.AppendText("\n" + "\\\\" + host + " ,searching for Malware...");
                //while there are still lines in the file
                while ((line = file.ReadLine()) != null)
                {
                    //userinputed registry or file
                    if (line.Contains("<reg>"))
                    {
                        //check for other malware files from malwareCheck
                        string newstring = line.Remove(0,5);
                        malwareRegCheck(newstring);
                    }
                    else
                    {
                        //send hostname to be checked
                        //pingHost(line);
                        //pingHost();
                        if(line.Contains("<user>"))
                        {
                            foreach (string un in users)
                            {
                                String fulllinepath = line.Replace("<user>", un);
                                //MessageBox.Show(fulllinepath);
                                malwareFileCheck(fulllinepath);
                            }
                        }
                        else
                        {
                            malwareFileCheck(line);
                        }
                    }
                }

            }
            //when there are no more host names close the file
            finally
            {
                //if file is not null then close file
                if (file != null)
                    file.Close();
            }

            //Output.AppendText(InputFile);
            //MessageBox.Show("Job Complete");
            //malwareCount = 0;
        }
        //check for registry entries
        private void malwareRegCheck(String regPath)
        {
            //update progess bar
            progresbarupdate();
            //MessageBox.Show(regPath);

                //HKEY_USERS or HKCU
            #region HKLM
            //if user inputed regkey contains HKEY_LOCAL_MACHINE or HKLM
            if (regPath.Contains("HKEY_LOCAL_MACHINE") || regPath.Contains("HKLM"))
            {
                //create string to check
                String checkedKey = "";
                //if reg contains HKEY_LOCAL_MACHINE
                if(regPath.Contains("HKEY_LOCAL_MACHINE"))
                {
                    //remove regKey
                    checkedKey = regPath.Substring(19);
                }
                //if reg contains HKLM
                else if (regPath.Contains("HKLM"))
                {
                    //remove regKey
                    checkedKey = regPath.Substring(5);
                }
                //check if key exists
                RegistryKey RK = Registry.LocalMachine.OpenSubKey(checkedKey);
                //if registry exists
                if (RK != null)
                {
                    //print out which reg are not whitelisted
                    string pt = System.String.Concat("\n" + regPath, ", not whitelisted\n");
                    Output.AppendText(pt);
                }
                //if registry does not exist
                else
                {
                    // It's not there
                    MessageBox.Show("cant find reg key\n" + checkedKey);
                }
            }
            #endregion HKLM
            #region HKCC
            //if user inputed regkey contains HKEY_CURRENT_CONFIG or HKCC
            if (regPath.Contains("HKEY_CURRENT_CONFIG") || regPath.Contains("HKCC"))
            {
                //create string to check
                String checkedKey = "";
                //if reg contains HKEY_LOCAL_MACHINE
                if (regPath.Contains("HKEY_CURRENT_CONFIG"))
                {
                    //remove regKey
                    checkedKey = regPath.Substring(20);
                }
                //if reg contains HKLM
                else if (regPath.Contains("HKCC"))
                {
                    //remove regKey
                    checkedKey = regPath.Substring(5);
                }
                //check if key exists
                RegistryKey RK = Registry.CurrentConfig.OpenSubKey(checkedKey);
                //if registry exists
                if (RK != null)
                {
                    //print out which reg are not whitelisted
                    string pt = System.String.Concat("\n" + regPath, ", not whitelisted\n");
                    Output.AppendText(pt);
                }
                //if registry does not exist
                else
                {
                    // It's not there
                    MessageBox.Show("cant find reg key\n" + checkedKey);
                }
            }
            #endregion HKCC
            #region HKCR
            //if user inputed regkey contains HKEY_CLASSES_ROOT or HKCR
            if (regPath.Contains("HKEY_CLASSES_ROOT") || regPath.Contains("HKCR"))
            {
                //create string to check
                String checkedKey = "";
                //if reg contains HKEY_LOCAL_MACHINE
                if (regPath.Contains("HKEY_CLASSES_ROOT"))
                {
                    //remove regKey
                    checkedKey = regPath.Substring(18);
                }
                //if reg contains HKLM
                else if (regPath.Contains("HKCR"))
                {
                    //remove regKey
                    checkedKey = regPath.Substring(5);
                }
                //check if key exists
                RegistryKey RK = Registry.ClassesRoot.OpenSubKey(checkedKey);
                //if registry exists
                if (RK != null)
                {
                    //print out which reg are not whitelisted
                    string pt = System.String.Concat("\n" + regPath, ", not whitelisted\n");
                    Output.AppendText(pt);
                }
                //if registry does not exist
                else
                {
                    // It's not there
                    MessageBox.Show("cant find reg key\n" + checkedKey);
                }
            }
            #endregion HKCR
            #region HKCU
            //if user inputed regkey contains HKEY_CURRENT_USER or HKCU
            if (regPath.Contains("HKEY_CURRENT_USER") || regPath.Contains("HKU"))
            {
                //create string to check
                String checkedKey = "";
                //if reg contains HKEY_LOCAL_MACHINE
                if (regPath.Contains("HKEY_CURRENT_USER"))
                {
                    //remove regKey
                    checkedKey = regPath.Substring(18);
                }
                //if reg contains HKLM
                else if (regPath.Contains("HKCU"))
                {
                    //remove regKey
                    checkedKey = regPath.Substring(5);
                }
                //check if key exists
                RegistryKey RK = Registry.CurrentUser.OpenSubKey(checkedKey);
                //if registry exists
                if (RK != null)
                {
                    //print out which reg are not whitelisted
                    string pt = System.String.Concat("\n" + regPath, ", not whitelisted\n");
                    Output.AppendText(pt);
                }
                //if registry does not exist
                else
                {
                    // It's not there
                    MessageBox.Show("cant find reg key\n" + checkedKey);
                }
            }
            #endregion HKCU
            #region HKU
            //if user inputed regkey contains HKEY_USERS or HKCU
            if (regPath.Contains("HKEY_USERS") || regPath.Contains("HKU"))
            {
                //enumerate SID
                //lists of registries
                List<string> hkey = new List<string>();
                List<string> names = new List<string>();

                // Open HKEY_USERS
                // on a remote computer.
                string remoteName = host;
                RegistryKey environmentKey = RegistryKey.OpenRemoteBaseKey(RegistryHive.Users, remoteName);
                //put all hkey_user entries in list
                foreach (string subKeyName in environmentKey.GetSubKeyNames())
                {
                    //add SID to hkey list
                    hkey.Add(subKeyName);
                }
                //go through the list and enumerate each one
                foreach (string sid in hkey)
                {
                    //get the subkeys of each SID under hkey
                    RegistryKey sids = RegistryKey.OpenRemoteBaseKey(RegistryHive.Users, remoteName).OpenSubKey(sid);
                    //for each id under hkey
                    foreach (string id in sids.GetSubKeyNames())
                    {
                        //create SID path and add to names list
                        string SIDpath = sid + "\\" + id;
                        names.Add(SIDpath);
                    }

                }
                // Close the registry key.
                environmentKey.Close();
                //get usernames once
                List<string> unOnce = new List<string>();
                //foreach SID
                foreach (string namer in names)
                {
                    //split SID path in to parts
                    string[] SIDS = namer.Split('\\');
                    //remove duplicate entries
                    if (!unOnce.Contains(SIDS[0]))
                    {
                        //add SID
                        unOnce.Add(SIDS[0]);
                    }
                }
                //foreach user in unOnce array
                foreach (String userSID in unOnce)
                {
                    //Output.AppendText(userSID + "\n");

                    //create string to check
                    String checkedKey = "";
                    //if reg contains HKEY_LOCAL_MACHINE
                    if (regPath.Contains("HKEY_USERS"))
                    {
                        //remove regKey
                        checkedKey = regPath.Substring(11);
                    }
                    //if reg contains HKLM
                    else if (regPath.Contains("HKU"))
                    {
                        //remove regKey
                        checkedKey = regPath.Substring(4);
                    }
                    checkedKey = checkedKey.Replace("<sid>", userSID);
                    Output.AppendText(checkedKey + "\n");

                    //check if key exists
                    RegistryKey RK = Registry.Users.OpenSubKey(checkedKey);
                    //if registry exists
                    if (RK != null)
                    {
                        //print out which reg are not whitelisted
                        string pt = System.String.Concat("\n" + checkedKey, ", not whitelisted\n");
                        Output.AppendText(pt);
                    }
                    //if registry does not exist
                    else
                    {
                        // It's not there
                        MessageBox.Show("cant find reg key\n" + checkedKey);
                    }

                }

            }
            #endregion HKU
        }
        //check for other malware files from malwareCheck
        private void malwareFileCheck(String malwarePath)
        {
            //update progess bar
            progresbarupdate();
            //counter used to tell if there is malware or not
            //int count = 0;
            //try
            try
            {
                //check for each file
                //create path
                String rep = malwarePath.Replace("C:", "c$");
                String malpath = "\\\\" + host + "\\" + rep;
                //Output.AppendText(malpath + "\n");
                if (File.Exists(malpath))
                {

                    //print out create time, last write time, and last access time for file
                    DateTime creationTimeUtc = File.GetCreationTimeUtc(malpath);
                    DateTime lastWriteTimeUtc = File.GetLastWriteTimeUtc(malpath);
                    DateTime lastAccessTimeUtc = File.GetLastAccessTimeUtc(malpath);
                    //get user inputed creation time
                    creationDate = CreationDateChooser.Value;

                    if (creationDate < creationTimeUtc)
                    {
                        //print out which folders are not whitelisted
                        string pt = System.String.Concat(malpath, ", not whitelisted\n");
                        Output.AppendText("\n" + pt);
                        Output.AppendText("creationTimeUtc: " + creationTimeUtc + "\n");
                        Output.AppendText("lastWriteTimeUtc: " + lastWriteTimeUtc + "\n");
                        Output.AppendText("lastAccessTimeUtc: " + lastAccessTimeUtc + "\n");
                    }

                }
                else if (Directory.Exists(malpath))
                {
                    //malwareCount++;
                    //Output.AppendText(malpath + "  ,Directory found\n");

                    //print out create time, last write time, and last access time for directory
                    DateTime creationTimeUtc = Directory.GetCreationTimeUtc(malpath);
                    DateTime lastWriteTimeUtc = Directory.GetLastWriteTimeUtc(malpath);
                    DateTime lastAccessTimeUtc = Directory.GetLastAccessTimeUtc(malpath);
                    //get user inputed creation time
                    creationDate = CreationDateChooser.Value;

                    if (creationDate < creationTimeUtc)
                    {
                        //print out which folders are not whitelisted
                        string pt = System.String.Concat(malpath, ", not whitelisted\n");
                        Output.AppendText("\n" + pt);
                        Output.AppendText("creationTimeUtc: " + creationTimeUtc + "\n");
                        Output.AppendText("lastWriteTimeUtc: " + lastWriteTimeUtc + "\n");
                        Output.AppendText("lastAccessTimeUtc: " + lastAccessTimeUtc + "\n");
                    }
                }
            }
            //catch all exceptions
            catch (Exception ex)
            {
                Output.AppendText(ex.Message);
                //throw;
            }

        }
        //multiple host file button
        private void button2_Click(object sender, EventArgs e)
        {

            //update progess bar
            label3.Text = "0%";
            progressBar1.Value = 0;
            progressBar1.PerformStep();
            progresbarupdate();
            //cycle through desktops

            //get file path
            string filePath = textBox1.Text;
            string line;
            //create file reader
            StreamReader file = null;
            //try to read the file
            try
            {
                //get lines from file
                file = new StreamReader(filePath);
                //while there are still lines in the file
                while ((line = file.ReadLine()) != null)
                {
                    //send hostname to be checked
                    //pingHost(line);
                    string rmwhitespace = line.Replace(" ", "");
                    rmwhitespace = rmwhitespace.Replace("\r", "");
                    rmwhitespace = rmwhitespace.Replace("\n", "");
                    rmwhitespace = rmwhitespace.Replace("\t", "");
                    host = rmwhitespace;
                    pingHost();
                }
            }
            //when there are no more host names close the file
            finally
            {
                //if file is not null then close file
                if (file != null)
                    file.Close();
            }

            //finish progress bar
            label3.Text = "100%";
            progressBar1.Value = 100;
            progressBar1.PerformStep();
            //Output.AppendText(InputFile);
            MessageBox.Show("Job Complete");
        }
        //browse for malware files
        private void button1_Click_1(object sender, EventArgs e)
        {
            //browse for file
            //file browser
            OpenFileDialog fdlg = new OpenFileDialog();
            //title of window
            fdlg.Title = "Malware Files";
            //default start directory
            fdlg.InitialDirectory = @"c:\Documents and Settings\Desktop";
            //what files to filter for
            fdlg.Filter = "All files (*.*)|*.*|All files (*.*)|*.*";
            //file index
            fdlg.FilterIndex = 2;
            //easy directory restore
            fdlg.RestoreDirectory = true;
            //if file exists
            if (fdlg.ShowDialog() == DialogResult.OK)
            {
                //send file path to text field
                textBox2.Text = fdlg.FileName;
            }
        }
        //displays help menu popup
        private void helpToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            //print out help message
            String help1 = "This application will search a host or a list of hosts for files defined by the user.";
            String help2 = "Run application with your Admin account.";
            string hostip = "Hostname/IP:\n";
            string hostlist = "List of Hosts:\n";
            String help3 = hostip + "To search one host for malware enter in hostname or IP of the host\nyou wish to search in the Hostname/IP field then click the Run button";
            String help4 = hostlist + "To search multiple hosts for malware click browse to find file containing\nhostnames/IPs of the hosts you wish to search then click the Run List button";
            //popup with all help information
            MessageBox.Show(string.Format("{0}\n{1}\n\n{2}\n\n{3}", help1, help2, help3, help4), "Help");
        }
        //browse for list of hosts
        private void button1_Click(object sender, EventArgs e)
        {
            //file browser
            OpenFileDialog fdlg = new OpenFileDialog();
            //title of window
            fdlg.Title = "List of Hosts to check";
            //default start directory
            fdlg.InitialDirectory = @"c:\Documents and Settings\Desktop";
            //what files to filter for
            fdlg.Filter = "All files (*.*)|*.*|All files (*.*)|*.*";
            //file index
            fdlg.FilterIndex = 2;
            //easy directory restore
            fdlg.RestoreDirectory = true;
            //if file exists
            if (fdlg.ShowDialog() == DialogResult.OK)
            {
                //send file path to text field
                textBox1.Text = fdlg.FileName;
            }
        }
        //this button pings the host
        private void PingButton_Click(object sender, EventArgs e)
        {
            //try
            try
            {
                //if host string exists
                if ((!host.Contains("LocalHost")))
                {
                    //ping host
                    Ping objping = new Ping();
                    PingReply objpingreply = objping.Send(host);
                    //if ping was successfull
                    if (objpingreply.Status == IPStatus.Success)
                    {
                        //print out that ping succeeded
                        string pingable = System.String.Concat(host, " is alive and pingable\n");
                        MessageBox.Show(pingable);
                    }
                    //if ping failed
                    else
                    {
                        //print out that ping has failed
                        string notpingable = System.String.Concat(host, " is not pingable\n");
                        MessageBox.Show(notpingable);
                    }
                }
                else
                {
                    MessageBox.Show("You are pinging the Localhost. The localhost is your machine. Please enter a hostname/ip into the host field.");
                }
            }
            //catch all exceptions
            catch (Exception ex)
            {
                Output.AppendText(ex.Message);
                MessageBox.Show("ERROR: Host " + host + "does not exist.\n" + ex.Message + "\n\nUse Ctrl+C to copy to clipboard");
                //throw;
            }
        }

        //-----------------------not filled functions
        private void Host_TextChanged(object sender, EventArgs e)
        {

        }
        private void Output_TextChanged(object sender, EventArgs e)
        {

        }
        private void label2_Click(object sender, EventArgs e)
        {

        }
        private void textBox1_TextChanged(object sender, EventArgs e)
        {
        }
        private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }
        private void Form2_Load(object sender, EventArgs e)
        {

        }

        private void CreationDateChooser_ValueChanged(object sender, EventArgs e)
        {

        }

        private void label5_Click(object sender, EventArgs e)
        {

        }

        private void ClearOuput_Click(object sender, EventArgs e)
        {
            Output.Clear();
        }
    }
}
