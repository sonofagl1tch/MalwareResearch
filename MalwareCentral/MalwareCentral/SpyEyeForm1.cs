using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Net;
using System.Net.NetworkInformation;
using Microsoft.Win32;
using System.Diagnostics;
using System.Xml;


namespace MalwareCentral
{

    public partial class SpyEye : Form
    {
        //gloabl variables
        private String host = "";
        private String[] spyeyefile = new String[]
        {
            "c$\\cleansweep.exe\\config.bin",
            "c$\\cleansweep.exe\\cleansweep.exe"
        };
        private String[] spyeye2file = new String[] {};
        private String[] spyeyereg = new String[]
        {
            "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\cleansweep.exe = c:\\cleansweep.exe\\cleansweep.exe"
        };
        private List<string> users = new List<string>();
        private DateTime creationDate;
        //private int malwareCount = 0;

        //create GUI
        public SpyEye()
        {
            InitializeComponent();
        }
        //exit application
        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //this command forcefully exits the application
            Application.Exit();
        }
        //this will obtain the os version from host
        private String GETOSMethod()
        {
            //using the registry get the name and version of the OS
            using (var reg = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, host))
            using (var key = reg.OpenSubKey(@"Software\Microsoft\Windows NT\CurrentVersion\"))
            {
                //MessageBox.Show(string.Format("Host:\n{0}\n\nName:\n{1}\n\nVersion:\n{2}", host, key.GetValue("ProductName"), key.GetValue("CurrentVersion")));
                return key.GetValue("ProductName").ToString();
            }
        }
        //one host at a time button
        private void Run_Click(object sender, EventArgs e)
        {
            //update progess bar
            label3.Text = "0%";
            progressBar1.Value = 0;
            progressBar1.PerformStep();
            progresbarupdate();
            //get host
            //get host
            String getHost = Host.Text.ToString();
            string trim = getHost.Replace(" ", "");
            host = trim;
            if (host.Contains(","))
            {
                string[] hosts = host.Split(',');
                foreach (string client in hosts)
                {
                    host = client.Trim();
                    //send host to get checked
                    pingHost();
                    Output.AppendText("\n=========================================================================\n\n");
                }
            }
            else
            {

                //send host to get checked
                pingHost();
            }
            //finish progress bar
            label3.Text = "100%";
            progressBar1.Value = 100;
            progressBar1.PerformStep();
            Output.AppendText("\n\nFinished searching " + host + ".\n");
        }
        //progress bar update
        private void progresbarupdate()
        {
            if (progressBar1.Value == progressBar1.Maximum)
            {
                //button1.Enabled = true;
                label3.Text = "100%";
                return;
            }
            progressBar1.PerformStep();
            double x = (progressBar1.Value / progressBar1.Maximum) * 100.0;
            label3.Text = String.Format("{0}%", x);
        }
        //this button gets the OS version and name from the host
        private void GETOS_Click(object sender, EventArgs e)
        {
            //using the registry get the name and version of the OS
            using (var reg = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, host))
            using (var key = reg.OpenSubKey(@"Software\Microsoft\Windows NT\CurrentVersion\"))
            {
                MessageBox.Show(string.Format("Host:\n{0}\n\nName:\n{1}\n\nVersion:\n{2}", host, key.GetValue("ProductName"), key.GetValue("CurrentVersion")) + "\n\nUse Ctrl+C to copy to clipboard");
            }
        }
        //multiple host file button
        private void button2_Click(object sender, EventArgs e)
        {
            //update progess bar
            label3.Text = "0%";
            progressBar1.Value = 0;
            progressBar1.PerformStep();
            progresbarupdate();
            //cycle through desktops

            //get file path
            string filePath = textBox1.Text;
            string line;
            //create file reader
            StreamReader file = null;
            //try to read the file
            try
            {
                //get lines from file
                file = new StreamReader(filePath);
                //while there are still lines in the file
                while ((line = file.ReadLine()) != null)
                {
                    //send hostname to be checked
                    //pingHost(line);
                    string rmwhitespace = line.Replace(" ", "");
                    rmwhitespace = rmwhitespace.Replace("\r", "");
                    rmwhitespace = rmwhitespace.Replace("\n", "");
                    rmwhitespace = rmwhitespace.Replace("\t", "");
                    host = rmwhitespace;
                    pingHost();
                }
            }
            //when there are no more host names close the file
            finally
            {
                //if file is not null then close file
                if (file != null)
                    file.Close();
            }

            //finish progress bar
            label3.Text = "100%";
            progressBar1.Value = 100;
            progressBar1.PerformStep();
            //Output.AppendText(InputFile);
            MessageBox.Show("Job Complete");
        }
        //ping each host
        private void pingHost()
        {
            String runningUser = Environment.UserName;
            if (!runningUser.Contains("sa"))
            {
                MessageBox.Show("You must run this application with your Admin account." + "\n\nUse Ctrl+C to copy to clipboard");
                Application.Exit();
            }
            else
            {

                //try
                try
                {
                    //if host string exists
                    if (host.Length > 0)
                    {
                        //ping host
                        Ping objping = new Ping();
                        PingReply objpingreply = objping.Send(host,1000);
                        //if ping was successfull
                        if (objpingreply.Status == IPStatus.Success)
                        {
                            //print out that ping succeeded
                            //string pingable = System.String.Concat("\n" + host + " ,is alive\n");
                            string pingable = System.String.Concat("\nPing " + objpingreply.Status.ToString() + " to " + host + "\n");
                            Output.AppendText(pingable);
                            //send host to readXML section
                            enumerate();
                        }
                        //if ping failed
                        else
                        {
                            //print out that ping has failed
                            //string notpingable = System.String.Concat("\n" + host + " ,is dead\n");
                            string notpingable = System.String.Concat("\nPing " + objpingreply.Status.ToString() + " to " + host + "\nAll operations aborted for " + host);
                            Output.AppendText(notpingable);
                        }
                    }
                    //update progess bar
                    progresbarupdate();
                }
                //catch all exceptions
                catch (Exception ex)
                {
                    Output.AppendText(ex.Message);
                    MessageBox.Show("ERROR: Host " + host + "does not exist.\n" + ex.Message + "\n\nUse Ctrl+C to copy to clipboard");
                    //throw;
                }
            }
        }
        //enumerate c$\Documents and Settings to get user names
        private void enumerate()
        {
            //update progess bar
            progresbarupdate();
             //create directories array and populate with all folders in c$\Documents and Settings
            string[] directories = null;
            //go to OS check
            //if os is win7
            if (GETOSMethod().Contains("Windows 7"))
            {
                //create directories array and populate with all folders in c$\Documents and Settings
                directories = Directory.GetDirectories("\\\\" + host + "\\c$\\Users\\");
            }
            //if os is winxp
            else if (GETOSMethod().Contains("XP"))
            {
                //create directories array and populate with all folders in c$\Documents and Settings
                directories = Directory.GetDirectories("\\\\" + host + "\\c$\\Documents and Settings\\");
            }
            //if os is not XP or 7
            else
            {
                //break and show user error
            }
            //create list called users
            List<string> users = new List<string>();
            //loop through directories array
            foreach (string dir in directories)
            {
                //split file path in to parts
                string[] words = dir.Split('\\');
                //get length of array
                int arraylen = words.Length;
                //username is last element in array
                string user = words[arraylen - 1];
                //add username to list
                users.Add(user);
            }
            //check spyeye1
            spyeye2Check();
        }
        //check for spyeye V2
        private void spyeye2Check()
        {
            //update progess bar
            progresbarupdate();
            //print out that the host is being searched for spyeye 2
            Output.AppendText("\n" + "\\\\" + host + " ,searching for spyeye 2...");
            //try
            try
            {
                //create array called directories
                string[] systemdrivefolders = Directory.GetDirectories("\\\\" + host + "\\c$\\");
                string[] systemdriveFiles = Directory.GetFiles("\\\\" + host + "\\c$\\");

                // for each directory in the systemdrive folder
                Output.AppendText("\n----------------Directories In %systemdrive%----------------");
                foreach (string dir in systemdrivefolders)
                {
                    //split file path in to parts
                    string[] folders = dir.Split('\\');
                    //get length of array
                    int folderlen = folders.Length;
                    //folder is last element in array
                    string folder = folders[folderlen - 1];
                    //if folder is whitelisted
                    if ((spyeye2file.Contains(folder)))
                    {
                        //do nothing
                    }
                    //if folder is not whitelisted
                    else
                    {
                        //print out create time, last write time, and last access time for directory
                        DateTime creationTimeUtc = Directory.GetCreationTimeUtc(dir);
                        DateTime lastWriteTimeUtc = Directory.GetLastWriteTimeUtc(dir);
                        DateTime lastAccessTimeUtc = Directory.GetLastAccessTimeUtc(dir);

                        //get user inputed creation time
                        creationDate = CreationDateChooser.Value;
                        //Convert.ToInt32(creationTimeUtc));

                        //if creation time is less then the date of the file
                        if (creationDate < creationTimeUtc)
                        {
                            //print out which folders are not whitelisted
                            string pt = System.String.Concat(dir, ", not whitelisted\n");
                            Output.AppendText("\n" + pt);
                            //print out dates
                            Output.AppendText("creationTimeUtc: " + creationTimeUtc + "\n");
                            Output.AppendText("lastWriteTimeUtc: " + lastWriteTimeUtc + "\n");
                            Output.AppendText("lastAccessTimeUtc: " + lastAccessTimeUtc + "\n");
                        }
                    }
                }
                // for each directory in the systemdrive folder
                Output.AppendText("\n----------------Files In %systemdrive%----------------");
                foreach (string file in systemdriveFiles)
                {
                    //split file path in to parts
                    string[] folders = file.Split('\\');
                    //get length of array
                    int folderlen = folders.Length;
                    //folder is last element in array
                    string folder = folders[folderlen - 1];
                    //if folder is whitelisted
                    if ((spyeye2file.Contains(folder)))
                    {
                        //do nothing
                    }
                    //if folder is not whitelisted
                    else
                    {
                        //print out create time, last write time, and last access time for directory
                        DateTime creationTimeUtc = Directory.GetCreationTimeUtc(file);
                        DateTime lastWriteTimeUtc = Directory.GetLastWriteTimeUtc(file);
                        DateTime lastAccessTimeUtc = Directory.GetLastAccessTimeUtc(file);

                        //get user inputed creation time
                        creationDate = CreationDateChooser.Value;
                        //Convert.ToInt32(creationTimeUtc));

                        //if creation time is less then the date of the file
                        if (creationDate < creationTimeUtc)
                        {
                            //print out which folders are not whitelisted
                            string pt = System.String.Concat(file, ", not whitelisted\n");
                            Output.AppendText("\n" + pt);
                            //print out dates
                            Output.AppendText("creationTimeUtc: " + creationTimeUtc + "\n");
                            Output.AppendText("lastWriteTimeUtc: " + lastWriteTimeUtc + "\n");
                            Output.AppendText("lastAccessTimeUtc: " + lastAccessTimeUtc + "\n");
                        }
                    }
                }
            }
            //catch all excepetions
            catch (Exception ex)
            {
                Output.AppendText(ex.Message);
                //throw;
            }
        }
        //browse for list of hosts
        private void button1_Click(object sender, EventArgs e)
        {
            //file browser
            OpenFileDialog fdlg = new OpenFileDialog();
            //title of window
            fdlg.Title = "List of Hosts to check";
            //default start directory
            fdlg.InitialDirectory = @"c:\Documents and Settings\Desktop";
            //what files to filter for
            fdlg.Filter = "All files (*.*)|*.*|All files (*.*)|*.*";
            //file index
            fdlg.FilterIndex = 2;
            //easy directory restore
            fdlg.RestoreDirectory = true;
            //if file exists
            if (fdlg.ShowDialog() == DialogResult.OK)
            {
                //send file path to text field
                textBox1.Text = fdlg.FileName;
            }
        }
        //this button pings the host
        private void PingButton_Click(object sender, EventArgs e)
        {
            //try
            try
            {
                //if host string exists
                if ((!host.Contains("LocalHost")))
                {
                    //ping host
                    Ping objping = new Ping();
                    PingReply objpingreply = objping.Send(host);
                    //if ping was successfull
                    if (objpingreply.Status == IPStatus.Success)
                    {
                        //print out that ping succeeded
                        string pingable = System.String.Concat(host, " is alive and pingable\n");
                        MessageBox.Show(pingable + "\n\nUse Ctrl+C to copy to clipboard");
                    }
                    //if ping failed
                    else
                    {
                        //print out that ping has failed
                        string notpingable = System.String.Concat(host, " is not pingable\n");
                        MessageBox.Show(notpingable + "\n\nUse Ctrl+C to copy to clipboard");
                    }
                }
                else
                {
                    MessageBox.Show("You are pinging the Localhost. The localhost is your machine. Please enter a hostname/ip into the host field." + "\n\nUse Ctrl+C to copy to clipboard");
                }
            }
            //catch all exceptions
            catch (Exception ex)
            {
                MessageBox.Show("ERROR: Host " + host + "does not exist.\n" + ex.Message + "\n\nUse Ctrl+C to copy to clipboard");
                //throw;
            }

        }
        //this displays the help message
        private void helpToolStripMenuItem1_Click_1(object sender, EventArgs e)
        {
            //print out help message
            String help1 = "This application will search a host or a list of hosts for files associated with spyeye.";
            String help2 = "Run application with your Admin account.";
            string hostip = "Hostname/IP:\n";
            string hostlist = "List of Hosts:\n";
            String help3 = hostip + "To search one host for spyeye enter in hostname or IP of the host\nyou wish to search in the Hostname/IP field then click the Run button";
            String help4 = hostlist + "To search multiple hosts for spyeye click browse to find file containing\nhostnames/IPs of the hosts you wish to search then click the Run List button";
            String help5 = "how to detect spyeye:\nLook through output for randomly generated folder/file names and a file creation time of the day of the infection alert.";
            //popup with all help information
            MessageBox.Show(string.Format("{0}\n{1}\n\n{2}\n\n{3}\n\n{4}" + "\n\nUse Ctrl+C to copy to clipboard", help1, help2, help3, help4, help5), "Help");
        }

        //-----------------------not filled functions
        private void Host_TextChanged(object sender, EventArgs e)
        {

        }
        private void Output_TextChanged(object sender, EventArgs e)
        {

        }
        private void label2_Click(object sender, EventArgs e)
        {

        }
        private void textBox1_TextChanged(object sender, EventArgs e)
        {
        }
        private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }
        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            //  malwareCheck();
        }
        private void Form1_Load(object sender, EventArgs e)
        {

        }
        private void menuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }

        private void CreationDateChooser_ValueChanged(object sender, EventArgs e)
        {

        }

        private void browse_Click(object sender, EventArgs e)
        {
            //file browser
            OpenFileDialog fdlg = new OpenFileDialog();
            //title of window
            fdlg.Title = "List of Hosts to check";
            //default start directory
            fdlg.InitialDirectory = @"c:\Documents and Settings\Desktop";
            //what files to filter for
            fdlg.Filter = "All files (*.*)|*.*|All files (*.*)|*.*";
            //file index
            fdlg.FilterIndex = 2;
            //easy directory restore
            fdlg.RestoreDirectory = true;
            //if file exists
            if (fdlg.ShowDialog() == DialogResult.OK)
            {
                //send file path to text field
                textBox1.Text = fdlg.FileName;
            }
        }

        private void runList_Click(object sender, EventArgs e)
        {
            //update progess bar
            label3.Text = "0%";
            progressBar1.Value = 0;
            progressBar1.PerformStep();
            progresbarupdate();
            //cycle through desktops
            //get file path
            string filePath = textBox1.Text;
            string line;
            //create file reader
            StreamReader file = null;
            //try to read the file
            try
            {
                //get lines from file
                file = new StreamReader(filePath);
                //while there are still lines in the file
                while ((line = file.ReadLine()) != null)
                {
                    //send hostname to be checked
                    //pingHost(line);
                    string rmwhitespace = line.Replace(" ", "");
                    rmwhitespace = rmwhitespace.Replace("\r", "");
                    rmwhitespace = rmwhitespace.Replace("\n", "");
                    rmwhitespace = rmwhitespace.Replace("\t", "");
                    host = rmwhitespace;
                    pingHost();
                }
            }
            //when there are no more host names close the file
            finally
            {
                //if file is not null then close file
                if (file != null)
                    file.Close();
            }

            //finish progress bar
            label3.Text = "100%";
            progressBar1.Value = 100;
            progressBar1.PerformStep();
            //Output.AppendText(InputFile);
            MessageBox.Show("Job Complete");
        }

        private void SpyEye_Load(object sender, EventArgs e)
        {

        }

        private void ClearOuput_Click(object sender, EventArgs e)
        {
            Output.Clear();
        }
    }
}
