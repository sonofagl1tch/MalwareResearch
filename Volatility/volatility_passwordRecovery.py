# Author Ryan Nolette
# Date Modified 06/26/2016
# Description: This script will accept a raw memeory dump and run it through various volatility commands to output usernames with their hashed passwords that can be used for cracking.
# Usage: python volatility_passwordRecovery.py /Users/master/Documents/DESKTOP-GKQPKB6-20161228-183619.raw
##############################################################
# The output is in the following format:
# USERNAME:SID:LM_HASH:NTLM_HASH:::
#
# This is a standard Windows 7 installation where LM hashes are disabled by default (default since Vista).
# The LM hash aad3b435b51404eeaad3b435b51404ee corresponds to an empty password.
# The NTLM hash 31d6cfe0d16ae931b73c59d7e0c089c0 corresponds to an empty password.
# NTLM hashes are computed by converting plaintext to UTF16LE and hashing with MD4: replicated with "echo -n '' | iconv -f ASCII -t UTF-16LE | openssl dgst -md4"
# The 2 hashes mentioned above confirm an account is disabled
##############################################################
# python ~/volatility_passwordRecovery.py WIN7-20161231-015126.raw
# Volatility Foundation Volatility Framework 2.6
# INFO    : volatility.debug    : Determining profile based on KDBG search...
# Volatility Foundation Volatility Framework 2.6
# Volatility Foundation Volatility Framework 2.6
# Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
# Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
# master:1000:aad3b435b51404eeaad3b435b51404ee:6d3986e540a63647454a50e26477ef94:::
##############################################################

##############################################################
import os
import sys
import subprocess
##############################################################

##############################################################
def GetProfile(VOLATILITY_PATH, MEM_CAPTURE):
    # This runs the volatility command below to get the suggest profiles
    # output example: Suggested Profile(s) : Win10x64_10586, Win10x64_14393, Win10x64, Win2016x64_14393
    #this command will get the suggest OS profiles from volatility
    GET_PROFILe="python " + VOLATILITY_PATH + " -f " + MEM_CAPTURE + " imageinfo"
    # create variable to be passed to next function
    for line in subprocess.check_output(GET_PROFILe, shell=True).split('\n'):
        if "Suggested Profile(s)"  in line:
            input = line
            FirstProfile(VOLATILITY_PATH, MEM_CAPTURE, input)
##############################################################

##############################################################
def FirstProfile(VOLATILITY_PATH, MEM_CAPTURE, input):
    # dump the hives. We are interested in 2 offsets: SYSTEM (-y) and SAM (-s)
    # \systemRoot\System32\Config\SAM
    # \REGISTRY\MACHINE\SYSTEM
    # $ ./vol.py -f memory.dmp --profile=Win7SP1x86 hivelist
    # create variable to be passed to next function
    for line in input.split(':'):
        if "Suggested" not in line:
            profiles = line.split(',')
            FIRST_PROFILE = profiles[0].strip()
            GETHIVES(VOLATILITY_PATH, MEM_CAPTURE, FIRST_PROFILE)
##############################################################

##############################################################
def GETHIVES(VOLATILITY_PATH, MEM_CAPTURE, FIRST_PROFILE):
    # view the registry hive loaded into memory
    # \ystemRoot\System32\Config\SAM
    # \REGISTRY\MACHINE\SYSTEM
    GET_HIVES="python " + VOLATILITY_PATH + " -f " + MEM_CAPTURE + " --profile=" + FIRST_PROFILE + " hivelist"
    # these variables have to be created outside of the loop and conditional statements because of the format of the output from the command
    SAM_HASH=""
    SYSTEM_HASH=""
    # create variable to be passed to next function
    for line in subprocess.check_output(GET_HIVES, shell=True).split('\n'):
        if "SAM" in line:
            FULL_SAM=line.split(" ")
            SAM_HASH=FULL_SAM[0]
        if "SYSTEM" in line:
            FULL_SYSTEM=line.split(" ")
            SYSTEM_HASH=FULL_SYSTEM[0]
    GETPWHASH(FIRST_PROFILE, VOLATILITY_PATH, MEM_CAPTURE, SAM_HASH, SYSTEM_HASH)
##############################################################

##############################################################
def GETPWHASH(FIRST_PROFILE, VOLATILITY_PATH, MEM_CAPTURE, SAM_HASH, SYSTEM_HASH):
    #Now, we can dump the password hashes:
    #$ ./vol.py -f ch2.dmp --profile=Win7SP1x86 hashdump -y 0x8b21c008 -s 0x9aad6148 > hashes.txt
    #0xffff91860e523000 0x000000010da29000 \SystemRoot\System32\Config\SAM
    #0xffff91860cc3c000 0x000000000503b000 \REGISTRY\MACHINE\SYSTEM
    GET_PW_HASH="python " + VOLATILITY_PATH + " -f " + MEM_CAPTURE + " --profile=" + FIRST_PROFILE + " hashdump -y " + SYSTEM_HASH + " -s " + SAM_HASH
    #
    for line in subprocess.check_output(GET_PW_HASH, shell=True).split('\n'):
        print line

##############################################################

##############################################################
#Where you installed volatility to. use "which vol.py" to find it if you cant remember.
VOLATILITY_PATH="/usr/local/bin/vol.py"
#get command line arguement for the path to the memory image you will be analyzing
CAPTURE=sys.argv[1]
#add qoutes around file path so spaces are ignored
MEM_CAPTURE="\"" + CAPTURE + "\""
#start process
GetProfile(VOLATILITY_PATH, MEM_CAPTURE)
##############################################################
