using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Management;

namespace JREManagement
{
    class Program
    {

        static void Main(string[] args)
        {
            //date
            DateTime crrntTime = DateTime.Now;//create date string to put in management file name
            //read all computers into an array
            String[] PCs = File.ReadAllLines(@"computers.txt"); //computer list is taken from AD audit report
            //create file to log output to
            String filepath = "JREManagementLog_" + crrntTime.ToString("MM_dd_yyyy_HH-mm-ss-tt") + ".txt";
                //"JREManagementLog.txt";
            //"JREManagementLog" + crrntTime.ToString("MM_dd_yyyy_HH-mm-ss-tt") + ".txt";
            StreamWriter writeFile = new StreamWriter(filepath);//store log in same directory as exe is ran from

            ////////////////////query host for JRE installed
            foreach (String host in PCs) //loop through host list
            {
                queryHost(host, writeFile);//for each host, query for installed JRE versions
            }
        }
        static void queryHost(String host, StreamWriter writeFile)
        {
            List<String> hostJREList = new List<string>();//create list object to contain of all JRE installed on host
            try
            {
                ManagementScope scope = new ManagementScope("\\\\" + host + "\\root\\cimv2"); //create connection string to remote host
                scope.Connect();//connect to remote host
                ObjectQuery query = new ObjectQuery("SELECT PackageName FROM Win32_Product WHERE PackageName LIKE 'jre%%'");//build query to ask host what JRE are installed
                ManagementObjectSearcher searcher = new ManagementObjectSearcher(scope, query);//search remote host for JRE
                ManagementObjectCollection queryCollection = searcher.Get();//get results from search
                if (queryCollection.Count > 0)//if the host has any JRE installed
                {
                    foreach (ManagementObject mo in queryCollection)//for each result in query
                    {
                        if (mo["PackageName"].ToString().Contains("jre"))//if the packageName contains JRE write host and jre to log file and add JRE to list to be passed along for the removal of JRE's
                        {
                            String packageName = mo["PackageName"].ToString();
                            writeFile.WriteLine(host + "," + packageName+",found");
                            writeFile.Flush();
                            hostJREList.Add(packageName.ToString());
                        }
                    }
                }
                else//if the host has no JRE installed just write to log file that now JRE are found on host
                {
                    writeFile.WriteLine(host + ",NoJREInstalled"+",none");
                    writeFile.Flush();
                }
                installJRE(host, writeFile, hostJREList);//install latest JRE
            }
            catch(Exception e)//write any error messages to file
            {
                writeFile.WriteLine(host + "," + e.Message.ToString());
                writeFile.Flush();
            }
        }     
        static void installJRE(String host, StreamWriter writeFile, List<String> hostJREList)
        {
            //\\t2\Software\Java\JavaSetup7u21.exe /s WEB_JAVA_SECURITY_LEVEL=VH
           // ManagementObjectSearcher mos = new ManagementObjectSearcher("SELECT PackageName FROM Win32_Product WHERE PackageName LIKE 'jre%%'");
            if (!hostJREList.Contains("jre1.7.0_21"))
            {
                try
                {
                    ManagementScope scope = new ManagementScope("\\\\" + host + "\\root\\cimv2"); //create connection string to remote host
                    scope.Connect();//connect to remote host
                    ManagementPath mp = new ManagementPath("Win32_Product");//use win32 product command for install
                    ObjectGetOptions ogo = new ObjectGetOptions();
                    ManagementClass mc = new ManagementClass(scope, mp, ogo);
                    ManagementBaseObject inParams = mc.GetMethodParameters("Install");
                    inParams["PackageLocation"] = "\\\\t2\\Software\\Java\\JavaSetup7u21.exe";
                    inParams["Options"] = "/s WEB_JAVA_SECURITY_LEVEL=VH";
                    inParams["AllUsers"] = true;
                    ManagementBaseObject retVal = mc.InvokeMethod("Install", inParams, null);

                    writeFile.WriteLine(host + ",jre1.7.0_21,Installation Started");
                    writeFile.Flush();
            
                }
                catch (Exception e)//write any error messages to file
                {
                    writeFile.WriteLine(host + ",Installation Stage," + e.Message.ToString());
                    writeFile.Flush();
                }

            }
            else
            {
                writeFile.WriteLine(host + ",jre1.7.0_21,Already Installed");
                writeFile.Flush();
            }

            removeJRE(host, writeFile, hostJREList);

        }
        static void removeJRE(String host, StreamWriter writeFile, List<String> hostJREList)
        {
            //loop through JRE versions and send uninstall command
            foreach (String jre in hostJREList)
            {
                if (!jre.Contains("jre1.7.0_21"))
                {
                    //SelectQuery query = new SelectQuery("Win32_Product", "packagename='"+jre+"'");

                    //EnumerationOptions enumOptions = new EnumerationOptions();
                    //enumOptions.ReturnImmediately = true;
                    //enumOptions.Rewindable = false;

                    //ManagementObjectSearcher searcher = new ManagementObjectSearcher(scope, query, options);

                    //foreach (ManagementObject app in searcher.Get())
                    //{
                    //        ManagementBaseObject outParams = app.InvokeMethod("Uninstall", null);
                    //        Console.WriteLine("The Uninstall method result: {0}", outParams["ReturnValue"]);
                    //}
                    //loop through JRE versions and send uninstall command
                    ManagementObjectSearcher mos = new ManagementObjectSearcher("SELECT * FROM Win32_Product WHERE PackageName = '" + jre + "'");
                    foreach (ManagementObject mo in mos.Get())
                    {
                        if (mo["PackageName"].ToString() == jre)
                        {
                            object hr = mo.InvokeMethod("Uninstall", null);
                            //return (bool)hr;
                        }
                    }
                    writeFile.WriteLine(host + "," + jre + ",Removed");
                    writeFile.Flush();
                }
                else
                {
                    writeFile.WriteLine(host + "," + jre + ",NOT Removed");
                    writeFile.Flush();
                }
            }
        }
    }
}
